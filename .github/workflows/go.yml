name: Go
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-11, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set up Go 1.17.1
        uses: actions/setup-go@v2.1.4
        with:
          go-version: 1.17.1
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build Dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y cmake libtool libc6-dev
          cd /tmp
          git clone https://github.com/lzfse/lzfse.git
          cd lzfse
          mkdir build
          cd build
          cmake ..
          sudo make install
      - name: Build Dependencies (macOS)
        if: matrix.platform == 'macos-11'
        run: |
          brew install lzfse tree
      # - name: Build Dependencies (Windows)
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     git clone https://github.com/lzfse/lzfse.git
      #     cd lzfse
      #     mkdir build
      #     cd build
      #     cmake -G "Visual Studio 16 2019" ..
      #     cmake --build . --config Debug
      #     cd Debug
      #     dlltool --def D:\a\ipsw\ipsw\hack\windows\lzfse.def --dllname lzfse.dll --output-lib lzfse.a

      #
      # CACHE
      #
      - name: Cache Downloaded IPSWs
        id: cache-ipsws
        if: matrix.platform == 'macos-11'
        uses: actions/cache@v2
        with:
          path: ~/.ipsw
          key: ${{ runner.os }}-${{ hashFiles('**/*.ipsw') }}
      - name: Cache go.mod (macOS)
        if: matrix.platform == 'macos-11'
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache go.mod (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: |
          go mod download

      #
      # BUILD
      #
      - name: Build (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
          CGO_ENABLED=1 go build -o build/dist/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (macOS)
        if: matrix.platform == 'macos-11'
        run: sudo CGO_ENABLED=1 go build -o build/dist/ipsw -ldflags "-s -w -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppVersion="v1.0.0" -X github.com/blacktop/ipsw/cmd/ipsw/cmd.AppBuildTime==$(date -u +%Y%m%d)" ./cmd/ipsw
      - name: Build (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          CGO_LDFLAGS: -LD:\a\ipsw\ipsw\lzfse\build\Debug
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          go build -o build/dist/ipsw.exe -ldflags "-linkmode external -extldflags -static" ./cmd/ipsw
          dir build/dist
          dir

      #
      # (Windows)
      #
      - name: Run Device List (Windows)
        if: matrix.platform == 'windows-latest'
        run: D:\a\ipsw\ipsw\build\dist\ipsw.exe device-list

      - name: Run Extract Remote Kernelcache (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          D:\a\ipsw\ipsw\build\dist\ipsw.exe -V download ipsw --kernel -v 14.6 -d iPhone12,1
          dir

      #
      # (Unix)
      #
      - name: Run Device List
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-11'
        run: LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw device-list

      - id: get-latest
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-11'
        run: |
          echo ::set-output name=version::$(LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw download ipsw --show-latest)

      - name: Run Extract Remote Kernelcache
        if: matrix.platform == 'ubuntu-latest'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw -V download ipsw --kernel -v 14.6 -d iPhone12,1
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw -V macho info */kernelcache*
      - name: Make cache folder
        if: matrix.platform == 'macos-11'
        run: mkdir ~/.ipsw
      #
      # DOWNLOAD CMD (macOS)
      #
      - name: Run Extract ALL Remote Kernelcaches
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw download ipsw --kernel -v 14.6 -d iPhone12,1
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw -V macho info */kernelcache*
      - name: Run download latest
        if: matrix.platform == 'macos-11' && steps.cache-ipsws.outputs.cache-hit != 'true'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw download ipsw --latest --device iPhone12,1 --confirm
      #
      # EXTRACT CMD (macOS)
      #
      - name: Run extract - (kernel, dsc and dtree)
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw extract --kernel --dyld --dtree *.ipsw
      #
      # KERNEL CMD (macOS)
      #
      - name: Run kernel kexts
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw kernel kexts ~/.ipsw/*iPhone11,8_iPhone12,1/kernelcache.release.iPhone11,8
      - name: Run kernel sbopts
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw kernel sbopts ~/.ipsw/*iPhone11,8_iPhone12,1/kernelcache.release.iPhone11,8
      #
      # DYLD CMD (macOS)
      #
      - name: Run dyld info
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld info ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --dylibs --sig -V
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld info ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --dylibs --sig --json

      - name: Run dyld symaddr (img)
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld symaddr ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --image libsystem_c.dylib
      - name: Run dyld symaddr (sym)
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld symaddr ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e _memcpy
      - name: Run dyld symaddr (img+sym)
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld symaddr ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --image libsystem_c.dylib _memcpy
      - name: Run dyld symaddr (ALL)
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld symaddr ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e | grep _memcpy

      - name: Run dyld macho
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld macho ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e JavaScriptCore --loads --objc --strings --symbols --starts -V

      - name: Run dyld webkit
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld webkit ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --rev

      # - name: Run dyld slide
      #   if: matrix.platform == 'macos-11'
      #   run: |
      #     LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld slide ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --auth

      # - name: Run dyld patches TODO: fix this
      #   if: matrix.platform == 'macos-11'
      #   run: |
      #     LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld patches ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e

      - name: Run dyld imports
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld imports ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e JavaScriptCore

      - name: Run dyld disass
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld disass ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --demangle --symbol _NSLog

      - name: Run dyld objc sel --image
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld objc sel ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e --image JavaScriptCore
      - name: Run dyld objc --class
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld objc --class ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e
      # - name: Run dyld objc --imp-cache
      #   if: matrix.platform == 'macos-11'
      #   run: |
      #     LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld objc --imp-cache ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e
      - name: Run dyld objc --proto
        if: matrix.platform == 'macos-11'
        run: |
          LD_LIBRARY_PATH=/usr/local/lib build/dist/ipsw dyld objc --proto ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e

      - name: Run dyld split
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw dyld split --xcode /Applications/Xcode_13.0.app ~/.ipsw/*iPhone11,8_iPhone12,1/dyld_shared_cache_arm64e ~/.ipsw
          tree ~/.ipsw
      #
      # MACHO CMD (macOS)
      #
      - name: Run macho
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw macho info ~/.ipsw/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore --ent --header --loads --starts --strings --symbols
      #
      # ENT CMD (macOS)
      #
      - name: Run ents
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw ent *.ipsw --ent platform-application
      #
      # INFO CMD (macOS)
      #
      - name: Run info
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw info *.ipsw
      #
      # UPDATE CMD (macOS)
      #
      - name: Run ipsw update
        if: matrix.platform == 'macos-11'
        run: |
          export PATH=$PWD/build/dist:$PATH
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw update --platform windows_x86_64 -V
          cd ~/.ipsw && LD_LIBRARY_PATH=/usr/local/lib ipsw update --detect

      - uses: actions/upload-artifact@v2
        with:
          name: Releases
          path: build/dist/
