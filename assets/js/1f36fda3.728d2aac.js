"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7403],{72023:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=i(74848),n=i(28453);const l={id:"split",title:"split",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"split",description:"Extracts all the dylibs using XCode's dsc_extractor"},d=void 0,o={id:"cli/ipsw/dyld/split",title:"split",description:"Extracts all the dylibs using XCode's dsc_extractor",source:"@site/docs/cli/ipsw/dyld/split.md",sourceDirName:"cli/ipsw/dyld",slug:"/cli/ipsw/dyld/split",permalink:"/ipsw/docs/cli/ipsw/dyld/split",draft:!1,unlisted:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/cli/ipsw/dyld/split.md",tags:[],version:"current",frontMatter:{id:"split",title:"split",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"split",description:"Extracts all the dylibs using XCode's dsc_extractor"},sidebar:"cli",previous:{title:"slide",permalink:"/ipsw/docs/cli/ipsw/dyld/slide"},next:{title:"str",permalink:"/ipsw/docs/cli/ipsw/dyld/str"}},r={},c=[{value:"ipsw dyld split",id:"ipsw-dyld-split",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"ipsw-dyld-split",children:"ipsw dyld split"}),"\n",(0,s.jsx)(t.p,{children:"Extracts all the dylibs using XCode's dsc_extractor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"ipsw dyld split <DSC> [flags]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"  -b, --build string     Cache build\n  -c, --cache            Build XCode device support cache\n  -h, --help             help for split\n  -o, --output string    Directory to extract the dylibs (default: CWD)\n  -v, --version string   Cache version\n  -x, --xcode string     Path to Xcode.app\n"})}),"\n",(0,s.jsx)(t.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"      --color           colorize output\n      --config string   config file (default is $HOME/.config/ipsw/config.yaml)\n      --no-color        disable colorize output\n  -V, --verbose         verbose output\n"})}),"\n",(0,s.jsx)(t.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/cli/ipsw/dyld",children:"ipsw dyld"}),"\t - Parse dyld_shared_cache"]}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>o});var s=i(96540);const n={},l=s.createContext(n);function d(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);