"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6922],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=i.createContext({}),p=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(a.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(a,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(g,s(s({ref:t},l),{},{components:n})):i.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[d]="string"==typeof e?e:r,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},54874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const o={id:"sign",title:"sign",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"sign",description:"Personalize DDI"},s=void 0,c={unversionedId:"cli/ipsw/idev/img/sign",id:"cli/ipsw/idev/img/sign",title:"sign",description:"Personalize DDI",source:"@site/docs/cli/ipsw/idev/img/sign.md",sourceDirName:"cli/ipsw/idev/img",slug:"/cli/ipsw/idev/img/sign",permalink:"/ipsw/docs/cli/ipsw/idev/img/sign",draft:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/cli/ipsw/idev/img/sign.md",tags:[],version:"current",frontMatter:{id:"sign",title:"sign",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"sign",description:"Personalize DDI"},sidebar:"cli",previous:{title:"nonce",permalink:"/ipsw/docs/cli/ipsw/idev/img/nonce"},next:{title:"unmount",permalink:"/ipsw/docs/cli/ipsw/idev/img/unmount"}},a={},p=[{value:"ipsw idev img sign",id:"ipsw-idev-img-sign",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"ipsw-idev-img-sign"},"ipsw idev img sign"),(0,r.kt)("p",null,"Personalize DDI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ipsw idev img sign [flags]\n")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  -b, --board-id uint     Device ApBoardID\n  -c, --chip-id uint      Device ApChipID\n  -e, --ecid uint         Device ApECID\n  -h, --help              help for sign\n      --insecure          do not verify ssl certs\n  -m, --manifest string   BuildManifest.plist to use\n  -n, --nonce string      Device ApNonce\n  -o, --output string     Folder to write signature to\n      --proxy string      HTTP/HTTPS proxy\n  -x, --xcode string      Path to Xcode.app (default "/Applications/Xcode.app")\n')),(0,r.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      --color           colorize output\n      --config string   config file (default is $HOME/.config/ipsw/config.yaml)\n  -u, --udid string     Device UniqueDeviceID to connect to\n  -V, --verbose         verbose output\n")),(0,r.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cli/ipsw/idev/img"},"ipsw idev img"),"\t - Image commands")))}u.isMDXComponent=!0}}]);