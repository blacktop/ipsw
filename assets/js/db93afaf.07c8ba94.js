"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8154],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var s=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},i=Object.keys(e);for(s=0;s<i.length;s++)r=i[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)r=i[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=s.createContext({}),p=function(e){var t=s.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(r),h=n,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return r?s.createElement(f,o(o({ref:t},c),{},{components:r})):s.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:n,o[1]=a;for(var p=2;p<i;p++)o[p]=r[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4712:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var s=r(87462),n=(r(67294),r(3905));const i={id:"ssh",title:"ssh",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"ssh",description:"SSH into a jailbroken device"},o=void 0,a={unversionedId:"cli/ipsw/ssh/ssh",id:"cli/ipsw/ssh/ssh",title:"ssh",description:"SSH into a jailbroken device",source:"@site/docs/cli/ipsw/ssh/ssh.md",sourceDirName:"cli/ipsw/ssh",slug:"/cli/ipsw/ssh/",permalink:"/ipsw/docs/cli/ipsw/ssh/",draft:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/cli/ipsw/ssh/ssh.md",tags:[],version:"current",frontMatter:{id:"ssh",title:"ssh",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"ssh",description:"SSH into a jailbroken device"},sidebar:"cli",previous:{title:"sepfw",permalink:"/ipsw/docs/cli/ipsw/sepfw"},next:{title:"debugserver",permalink:"/ipsw/docs/cli/ipsw/ssh/debugserver"}},l={},p=[{value:"ipsw ssh",id:"ipsw-ssh",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,s.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"ipsw-ssh"},"ipsw ssh"),(0,n.kt)("p",null,"SSH into a jailbroken device"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ipsw ssh [flags]\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'  -h, --help              help for ssh\n  -t, --host string       ssh host (default "localhost")\n  -n, --insecure          ignore known_hosts\n  -i, --key string        ssh key (default "$HOME/.ssh/id_rsa")\n  -s, --password string   ssh password (default "alpine")\n  -p, --port string       ssh port (default "2222")\n  -u, --user string       ssh user (default "root")\n')),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"      --color           colorize output\n      --config string   config file (default is $HOME/.config/ipsw/config.yaml)\n  -V, --verbose         verbose output\n")),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/cli/ipsw"},"ipsw"),"\t - Download and Parse IPSWs (and SO much more)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/cli/ipsw/ssh/debugserver"},"ipsw ssh debugserver"),"\t - Prep device for remote debugging"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/cli/ipsw/ssh/shsh"},"ipsw ssh shsh"),"\t - Get shsh blobs from device")))}u.isMDXComponent=!0}}]);