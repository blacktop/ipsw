"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[968],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),x=o,h=p["".concat(s,".").concat(x)]||p[x]||u[x]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=x;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},7614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={hide_table_of_contents:!0,description:"How to symbolicate crashlogs."},i="Symbolicate Crashlogs",l={unversionedId:"guides/symbolicate",id:"guides/symbolicate",title:"Symbolicate Crashlogs",description:"How to symbolicate crashlogs.",source:"@site/docs/guides/symbolicate.md",sourceDirName:"guides",slug:"/guides/symbolicate",permalink:"/ipsw/docs/guides/symbolicate",draft:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/guides/symbolicate.md",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0,description:"How to symbolicate crashlogs."},sidebar:"docs",previous:{title:"Dump Syscalls",permalink:"/ipsw/docs/guides/dump_syscalls"},next:{title:"List *OS Devices",permalink:"/ipsw/docs/guides/device_list"}},s={},c=[],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"symbolicate-crashlogs"},"Symbolicate Crashlogs"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is useful for symbolicating crashlogs you have collected from a device you don't have access to")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ipsw")," will detect the ",(0,o.kt)("inlineCode",{parentName:"p"},"dyld_shared_cache")," needed to symbolicate the ",(0,o.kt)("strong",{parentName:"p"},"userspace")," crashlog"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ipsw symbolicate solitaire-2021-02-23-185510.ips\n\n   \u2a2f please supply a dyld_shared_cache for iPhone12,1 running 14.5 (18E5154f)\n")),(0,o.kt)("p",null,"You can download the required ",(0,o.kt)("inlineCode",{parentName:"p"},"dyld_shared_cache")," like so"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ipsw download ipsw --device iPhone12,1 --version 14.5\n")),(0,o.kt)("p",null,"To extract the ",(0,o.kt)("inlineCode",{parentName:"p"},"dyld_shared_cache")," from the downloaded IPSW file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ipsw extract --dyld <IPSW.ipsw>\n")),(0,o.kt)("p",null,"You can download the current ",(0,o.kt)("inlineCode",{parentName:"p"},"beta")," shared caches like so"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ipsw download ota --platform ios --device iPhone12,1 --beta --dyld\n? You are about to download 1 OTA files. Continue? Yes\n   \u2022 Parsing remote OTA        build=18E5154f device=iPhone12,1 iPhone11,8 version=iOS145DevBeta2\n   \u2022 Extracting remote dyld_shared_cache (can be a bit CPU intensive)\n")),(0,o.kt)("p",null,"Now you can symbolicate the crashlog"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ipsw symbolicate solitaire-2021-02-23-185510.ips dyld_shared_cache_arm64e\n\nProcess:             solitaire [12345]\nHardware Model:      iPhone12,1\nOS Version:          14.5\nBuildID:             18E5154f\n\nException Type:      EXC_BAD_ACCESS (SIGSEGV)\nException Subtype:\nKERN_INVALID_ADDRESS at 0x0000020000000010 -> 0x0000000000000010 (possible pointer authentication failure)\nVM Region Info: 0x10 is not in any region.  Bytes before following region: 4363091952\n      REGION TYPE                 START - END      [ VSIZE] PRT/MAX SHRMOD  REGION DETAIL\n      UNUSED SPACE AT START\n---\x3e\n      __TEXT                   1040f8000-1040fc000 [   16K] r-x/r-x SM=COW  ...app/solitaire\n\nTermination Signal:  Segmentation fault: 11\nTermination Reason:  Namespace SIGNAL, Code 0xb\nTerminating Process: exc handler [12345]\nTriggered by Thread: 45\n\nThread 45 name: Dispatch queue: CTTelephonyNetworkInfo\nThread 45 Crashed:\n  0: libobjc.A.dylib         (slide=0x27010000) 0x1bc39e1e0 _objc_msgSend + 32\n  1: CoreFoundation          (slide=0x27010000) 0x1a734e76c -[__NSDictionaryM objectForKeyedSubscript:] + 184\n  2: CoreTelephony           (slide=0x27010000) 0x1a79d1230 -[CTTelephonyNetworkInfo updateRat:descriptor:] + 144\n  3: CoreTelephony           (slide=0x27010000) 0x1a79d1114 -[CTTelephonyNetworkInfo queryRatForDescriptor:] + 164\n  4: CoreTelephony           (slide=0x27010000) 0x1a79cfe9c -[CTTelephonyNetworkInfo connectionStateChanged:connection:dataConnectionStatusInfo:] + 72\n  5: CoreFoundation          (slide=0x27010000) 0x1a7476894 ___invoking___ + 148\n  6: CoreFoundation          (slide=0x27010000) 0x1a734a054 -[NSInvocation invoke] + 380\n  7: CoreFoundation          (slide=0x27010000) 0x1a734a658 -[NSInvocation invokeWithTarget:] + 80\n  8: CoreTelephony           (slide=0x27010000) 0x1a79d9fb0 __ZZN8dispatch5asyncIZ50-[CoreTelephonyClientMux sink:handleNotification:]E3$_2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS4_14default_deleteIS6_EEEEENUlPvE_8__invokeESA_ + 44\n  9: libdispatch.dylib       (slide=0x27010000) 0x1a705e878 __dispatch_client_callout + 20\n 10: libdispatch.dylib       (slide=0x27010000) 0x1a7066060 __dispatch_lane_serial_drain + 620\n 11: libdispatch.dylib       (slide=0x27010000) 0x1a7066c5c __dispatch_lane_invoke + 404\n 12: libdispatch.dylib       (slide=0x27010000) 0x1a7071518 __dispatch_workloop_worker_thread + 764\n 13: libsystem_pthread.dylib (slide=0x27010000) 0x1f33ba7a4 __pthread_wqthread + 276\n 14: libsystem_pthread.dylib (slide=0x27010000) 0x1f33c174c _start_wqthread + 8\n\nThread 45 State:\n    x0: 0x00000002803e0047   x1: 0x00000001f6df3124   x2: 0x0000000281ed4000   x3: 0x00000001b6efb344\n    x4: 0x00000000000062dc   x5: 0x0000000000000001   x6: 0x3130303030303030   x7: 0x0000000000000000\n    x8: 0x00000001f6df3000   x9: 0xdb6091bce8b38b12  x10: 0x6ae10002803e0047  x11: 0x0000000281ed4021\n   x12: 0x0000000281ed4021  x13: 0x0000020000000000  x14: 0x00000001a7604012  x15: 0x0000020000000000\n   x16: 0x0000000000000000  x17: 0xd0357901a735c988  x18: 0x0000000000000000  x19: 0x0000000281ed4000\n   x20: 0x00000001f6df3124  x21: 0x0000000000000003  x22: 0x00000002801de580  x23: 0x0000000000000003\n   x24: 0x0000000000000001  x25: 0x000000020abc3520  x26: 0x0000000000000003  x27: 0x0000000000000000\n   x28: 0x0000000000000104   fp: 0x000000016de0e780   lr: 0x00000001a734e76c\n    sp: 0x000000016de0e740   pc: 0x00000001bc39e1e0 cpsr: 0x20001000\n   esr: 0x92000004\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--unslide")," flag to unslide the crashlog for easier static analysis")))}u.isMDXComponent=!0}}]);