"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6863],{3905:(e,t,s)=>{s.d(t,{Zo:()=>c,kt:()=>f});var r=s(67294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function i(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?i(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function l(e,t){if(null==e)return{};var s,r,n=function(e,t){if(null==e)return{};var s,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)s=i[r],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)s=i[r],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var a=r.createContext({}),p=function(e){var t=r.useContext(a),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},c=function(e){var t=p(e.components);return r.createElement(a.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var s=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(s),d=n,f=h["".concat(a,".").concat(d)]||h[d]||u[d]||i;return s?r.createElement(f,o(o({ref:t},c),{},{components:s})):r.createElement(f,o({ref:t},c))}));function f(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=s.length,o=new Array(i);o[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[h]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=s[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,s)}d.displayName="MDXCreateElement"},16730:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=s(87462),n=(s(67294),s(3905));const i={id:"shsh",title:"shsh",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"shsh",description:"Get shsh blobs from device"},o=void 0,l={unversionedId:"cli/ipsw/ssh/shsh",id:"cli/ipsw/ssh/shsh",title:"shsh",description:"Get shsh blobs from device",source:"@site/docs/cli/ipsw/ssh/shsh.md",sourceDirName:"cli/ipsw/ssh",slug:"/cli/ipsw/ssh/shsh",permalink:"/ipsw/docs/cli/ipsw/ssh/shsh",draft:!1,editUrl:"https://github.com/blacktop/ipsw/tree/master/www/docs/cli/ipsw/ssh/shsh.md",tags:[],version:"current",frontMatter:{id:"shsh",title:"shsh",hide_title:!0,hide_table_of_contents:!0,sidebar_label:"shsh",description:"Get shsh blobs from device"},sidebar:"cli",previous:{title:"debugserver",permalink:"/ipsw/docs/cli/ipsw/ssh/debugserver"},next:{title:"symbolicate",permalink:"/ipsw/docs/cli/ipsw/symbolicate"}},a={},p=[{value:"ipsw ssh shsh",id:"ipsw-ssh-shsh",level:2},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],c={toc:p},h="wrapper";function u(e){let{components:t,...s}=e;return(0,n.kt)(h,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"ipsw-ssh-shsh"},"ipsw ssh shsh"),(0,n.kt)("p",null,"Get shsh blobs from device"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"ipsw ssh shsh [flags]\n")),(0,n.kt)("h3",{id:"options"},"Options"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"  -h, --help   help for shsh\n")),(0,n.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'      --color             colorize output\n      --config string     config file (default is $HOME/.config/ipsw/config.yaml)\n  -t, --host string       ssh host (default "localhost")\n  -n, --insecure          ignore known_hosts\n  -i, --key string        ssh key (default "$HOME/.ssh/id_rsa")\n  -s, --password string   ssh password (default "alpine")\n  -p, --port string       ssh port (default "2222")\n  -u, --user string       ssh user (default "root")\n  -V, --verbose           verbose output\n')),(0,n.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/cli/ipsw/ssh"},"ipsw ssh"),"\t - SSH into a jailbroken device")))}u.isMDXComponent=!0}}]);