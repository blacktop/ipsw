// Code generated by "stringer -type=compressionType -output aea_string.go"; DO NOT EDIT.

package aea

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NONE-45]
	_ = x[LZ4-52]
	_ = x[LZBITMAP-98]
	_ = x[LZFSE-101]
	_ = x[LZVN-102]
	_ = x[LZMA-120]
	_ = x[ZLIB-122]
}

const (
	_compressionType_name_0 = "NONE"
	_compressionType_name_1 = "LZ4"
	_compressionType_name_2 = "LZBITMAP"
	_compressionType_name_3 = "LZFSELZVN"
	_compressionType_name_4 = "LZMA"
	_compressionType_name_5 = "ZLIB"
)

var (
	_compressionType_index_3 = [...]uint8{0, 5, 9}
)

func (i compressionType) String() string {
	switch {
	case i == 45:
		return _compressionType_name_0
	case i == 52:
		return _compressionType_name_1
	case i == 98:
		return _compressionType_name_2
	case 101 <= i && i <= 102:
		i -= 101
		return _compressionType_name_3[_compressionType_index_3[i]:_compressionType_index_3[i+1]]
	case i == 120:
		return _compressionType_name_4
	case i == 122:
		return _compressionType_name_5
	default:
		return "compressionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
