// Code generated by "stringer -type=renditionAttributeType,renditionLayoutType,resourceID,csiBitmapEncoding -output car_string.go"; DO NOT EDIT.

package car

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ThemeLook-0]
	_ = x[Element-1]
	_ = x[Part-2]
	_ = x[Size-3]
	_ = x[Direction-4]
	_ = x[placeholder-5]
	_ = x[Value-6]
	_ = x[ThemeAppearance-7]
	_ = x[Dimension1-8]
	_ = x[Dimension2-9]
	_ = x[State-10]
	_ = x[Layer-11]
	_ = x[Scale-12]
	_ = x[PresentationState-14]
	_ = x[Idiom-15]
	_ = x[Subtype-16]
	_ = x[Identifier-17]
	_ = x[PreviousValue-18]
	_ = x[PreviousState-19]
	_ = x[HorizontalSizeClass-20]
	_ = x[VerticalSizeClass-21]
	_ = x[MemoryLevelClass-22]
	_ = x[GraphicsFeatureSetClass-23]
	_ = x[DisplayGamut-24]
	_ = x[DeploymentTarget-25]
}

const (
	_renditionAttributeType_name_0 = "ThemeLookElementPartSizeDirectionplaceholderValueThemeAppearanceDimension1Dimension2StateLayerScale"
	_renditionAttributeType_name_1 = "PresentationStateIdiomSubtypeIdentifierPreviousValuePreviousStateHorizontalSizeClassVerticalSizeClassMemoryLevelClassGraphicsFeatureSetClassDisplayGamutDeploymentTarget"
)

var (
	_renditionAttributeType_index_0 = [...]uint8{0, 9, 16, 20, 24, 33, 44, 49, 64, 74, 84, 89, 94, 99}
	_renditionAttributeType_index_1 = [...]uint8{0, 17, 22, 29, 39, 52, 65, 84, 101, 117, 140, 152, 168}
)

func (i renditionAttributeType) String() string {
	switch {
	case i <= 12:
		return _renditionAttributeType_name_0[_renditionAttributeType_index_0[i]:_renditionAttributeType_index_0[i+1]]
	case 14 <= i && i <= 25:
		i -= 14
		return _renditionAttributeType_name_1[_renditionAttributeType_index_1[i]:_renditionAttributeType_index_1[i+1]]
	default:
		return "renditionAttributeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OnePart-0]
	_ = x[ThreePartHorizontal-1]
	_ = x[ThreePartVertical-2]
	_ = x[NinePart-3]
	_ = x[TwelvePart-4]
	_ = x[ManyPart-5]
	_ = x[Gradient-6]
	_ = x[Effect-7]
	_ = x[Animation-8]
	_ = x[Vector-9]
	_ = x[RawData-1000]
	_ = x[ExternalLink-1001]
	_ = x[LayerStack-1002]
	_ = x[InternalLink-1003]
	_ = x[Packed-1004]
	_ = x[NamedContents-1005]
	_ = x[ThinningPlaceholder-1006]
	_ = x[Texture-1007]
	_ = x[TextureImage-1008]
	_ = x[Color-1009]
	_ = x[MultiSizeImageSet-1010]
	_ = x[ModelAsset-1011]
	_ = x[ModelMesh-1012]
	_ = x[RecognitionGroup-1013]
	_ = x[RecognitionObject-1014]
}

const (
	_renditionLayoutType_name_0 = "OnePartThreePartHorizontalThreePartVerticalNinePartTwelvePartManyPartGradientEffectAnimationVector"
	_renditionLayoutType_name_1 = "RawDataExternalLinkLayerStackInternalLinkPackedNamedContentsThinningPlaceholderTextureTextureImageColorMultiSizeImageSetModelAssetModelMeshRecognitionGroupRecognitionObject"
)

var (
	_renditionLayoutType_index_0 = [...]uint8{0, 7, 26, 43, 51, 61, 69, 77, 83, 92, 98}
	_renditionLayoutType_index_1 = [...]uint8{0, 7, 19, 29, 41, 47, 60, 79, 86, 98, 103, 120, 130, 139, 155, 172}
)

func (i renditionLayoutType) String() string {
	switch {
	case i <= 9:
		return _renditionLayoutType_name_0[_renditionLayoutType_index_0[i]:_renditionLayoutType_index_0[i+1]]
	case 1000 <= i && i <= 1014:
		i -= 1000
		return _renditionLayoutType_name_1[_renditionLayoutType_index_1[i]:_renditionLayoutType_index_1[i+1]]
	default:
		return "renditionLayoutType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SliceID-1001]
	_ = x[SampleID-1002]
	_ = x[MetricsID-1003]
	_ = x[CompositingOptionsID-1004]
	_ = x[MetaDataID-1005]
	_ = x[MetaDataEXIFOrientationID-1006]
	_ = x[ImageRowBytesID-1007]
	_ = x[ExternalLinkID-1008]
	_ = x[LayerReferenceDeprecatedID-1009]
	_ = x[InternalLinkID-1010]
	_ = x[AlphaCroppingID-1011]
	_ = x[LayerReferenceID-1012]
	_ = x[PackedNamesID-1013]
	_ = x[TextureInterpretationID-1014]
	_ = x[PhysicalSizeID-1015]
	_ = x[RenditionPropertyID-1016]
	_ = x[TransformationID-1017]
}

const _resourceID_name = "SliceIDSampleIDMetricsIDCompositingOptionsIDMetaDataIDMetaDataEXIFOrientationIDImageRowBytesIDExternalLinkIDLayerReferenceDeprecatedIDInternalLinkIDAlphaCroppingIDLayerReferenceIDPackedNamesIDTextureInterpretationIDPhysicalSizeIDRenditionPropertyIDTransformationID"

var _resourceID_index = [...]uint16{0, 7, 15, 24, 44, 54, 79, 94, 108, 134, 148, 163, 179, 192, 215, 229, 248, 264}

func (i resourceID) String() string {
	i -= 1001
	if i >= resourceID(len(_resourceID_index)-1) {
		return "resourceID(" + strconv.FormatInt(int64(i+1001), 10) + ")"
	}
	return _resourceID_name[_resourceID_index[i]:_resourceID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RawBytes-0]
	_ = x[RLE-1]
	_ = x[ZIP-2]
	_ = x[LZVN-3]
	_ = x[LZFSE-4]
	_ = x[JPEGLZFSE-5]
	_ = x[BlurredImage-6]
	_ = x[ASTCImage-7]
	_ = x[PaletteImage-8]
	_ = x[HEVC-9]
	_ = x[Deepmap-10]
	_ = x[Deepmap2-11]
}

const _csiBitmapEncoding_name = "RawBytesRLEZIPLZVNLZFSEJPEGLZFSEBlurredImageASTCImagePaletteImageHEVCDeepmapDeepmap2"

var _csiBitmapEncoding_index = [...]uint8{0, 8, 11, 14, 18, 23, 32, 44, 53, 65, 69, 76, 84}

func (i csiBitmapEncoding) String() string {
	if i >= csiBitmapEncoding(len(_csiBitmapEncoding_index)-1) {
		return "csiBitmapEncoding(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _csiBitmapEncoding_name[_csiBitmapEncoding_index[i]:_csiBitmapEncoding_index[i+1]]
}
