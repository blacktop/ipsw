// Code generated by "stringer -type=iface,protocolFamily -output types_string.go"; DO NOT EDIT.

package pcap

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[other-1]
	_ = x[regular1822-2]
	_ = x[hdh1822-3]
	_ = x[ddnX25-4]
	_ = x[rfc877x25-5]
	_ = x[ethernetCsmacd-6]
	_ = x[iso88023Csmacd-7]
	_ = x[iso88024TokenBus-8]
	_ = x[iso88025TokenRing-9]
	_ = x[iso88026Man-10]
	_ = x[starLan-11]
	_ = x[proteon10Mbit-12]
	_ = x[proteon80Mbit-13]
	_ = x[hyperchannel-14]
	_ = x[fddi-15]
	_ = x[lapb-16]
	_ = x[sdlc-17]
	_ = x[ds1-18]
	_ = x[e1-19]
	_ = x[basicISDN-20]
	_ = x[primaryISDN-21]
	_ = x[propPointToPointSerial-22]
	_ = x[ppp-23]
	_ = x[softwareLoopback-24]
	_ = x[eon-25]
	_ = x[ethernet3Mbit-26]
	_ = x[nsip-27]
	_ = x[slip-28]
	_ = x[ultra-29]
	_ = x[ds3-30]
	_ = x[sip-31]
	_ = x[frameRelay-32]
	_ = x[rs232-33]
	_ = x[para-34]
	_ = x[arcnet-35]
	_ = x[arcnetPlus-36]
	_ = x[atm-37]
	_ = x[miox25-38]
	_ = x[sonet-39]
	_ = x[x25ple-40]
	_ = x[iso88022llc-41]
	_ = x[localTalk-42]
	_ = x[smdsDxi-43]
	_ = x[frameRelayService-44]
	_ = x[v35-45]
	_ = x[hssi-46]
	_ = x[hippi-47]
	_ = x[modem-48]
	_ = x[aal5-49]
	_ = x[sonetPath-50]
	_ = x[sonetVT-51]
	_ = x[smdsIcip-52]
	_ = x[propVirtual-53]
	_ = x[propMultiplexor-54]
	_ = x[ieee80212-55]
	_ = x[fibreChannel-56]
	_ = x[hippiInterface-57]
	_ = x[frameRelayInterconnect-58]
	_ = x[aflane8023-59]
	_ = x[aflane8025-60]
	_ = x[cctEmul-61]
	_ = x[fastEther-62]
	_ = x[isdn-63]
	_ = x[v11-64]
	_ = x[v36-65]
	_ = x[g703at64k-66]
	_ = x[g703at2mb-67]
	_ = x[qllc-68]
	_ = x[fastEtherFX-69]
	_ = x[channel-70]
	_ = x[ieee80211-71]
	_ = x[ibm370parChan-72]
	_ = x[escon-73]
	_ = x[dlsw-74]
	_ = x[isdns-75]
	_ = x[isdnu-76]
	_ = x[lapd-77]
	_ = x[ipSwitch-78]
	_ = x[rsrb-79]
	_ = x[atmLogical-80]
	_ = x[ds0-81]
	_ = x[ds0Bundle-82]
	_ = x[bsc-83]
	_ = x[async-84]
	_ = x[cnr-85]
	_ = x[iso88025Dtr-86]
	_ = x[eplrs-87]
	_ = x[arap-88]
	_ = x[propCnls-89]
	_ = x[hostPad-90]
	_ = x[termPad-91]
	_ = x[frameRelayMPI-92]
	_ = x[x213-93]
	_ = x[adsl-94]
	_ = x[radsl-95]
	_ = x[sdsl-96]
	_ = x[vdsl-97]
	_ = x[iso88025CRFPInt-98]
	_ = x[myrinet-99]
	_ = x[voiceEM-100]
	_ = x[voiceFXO-101]
	_ = x[voiceFXS-102]
	_ = x[voiceEncap-103]
	_ = x[voiceOverIp-104]
	_ = x[atmDxi-105]
	_ = x[atmFuni-106]
	_ = x[atmIma-107]
	_ = x[pppMultilinkBundle-108]
	_ = x[ipOverCdlc-109]
	_ = x[ipOverClaw-110]
	_ = x[stackToStack-111]
	_ = x[virtualIpAddress-112]
	_ = x[mpc-113]
	_ = x[ipOverAtm-114]
	_ = x[iso88025Fiber-115]
	_ = x[tdlc-116]
	_ = x[gigabitEthernet-117]
	_ = x[hdlc-118]
	_ = x[lapf-119]
	_ = x[v37-120]
	_ = x[x25mlp-121]
	_ = x[x25huntGroup-122]
	_ = x[transpHdlc-123]
	_ = x[interleave-124]
	_ = x[fast-125]
	_ = x[ip-126]
	_ = x[docsCableMaclayer-127]
	_ = x[docsCableDownstream-128]
	_ = x[docsCableUpstream-129]
	_ = x[a12MppSwitch-130]
	_ = x[tunnel-131]
	_ = x[coffee-132]
	_ = x[ces-133]
	_ = x[atmSubInterface-134]
	_ = x[l2vlan-135]
	_ = x[l3ipvlan-136]
	_ = x[l3ipxvlan-137]
	_ = x[digitalPowerline-138]
	_ = x[mediaMailOverIp-139]
	_ = x[dtm-140]
	_ = x[dcn-141]
	_ = x[ipForward-142]
	_ = x[msdsl-143]
	_ = x[ieee1394-144]
	_ = x[if_gsn-145]
	_ = x[dvbRccMacLayer-146]
	_ = x[dvbRccDownstream-147]
	_ = x[dvbRccUpstream-148]
	_ = x[atmVirtual-149]
	_ = x[mplsTunnel-150]
	_ = x[srp-151]
	_ = x[voiceOverAtm-152]
	_ = x[voiceOverFrameRelay-153]
	_ = x[idsl-154]
	_ = x[compositeLink-155]
	_ = x[ss7SigLink-156]
	_ = x[propWirelessP2P-157]
	_ = x[frForward-158]
	_ = x[rfc1483-159]
	_ = x[USB-160]
	_ = x[ieee8023adLag-161]
	_ = x[bgppolicyaccounting-162]
	_ = x[frf16MfrBundle-163]
	_ = x[h323Gatekeeper-164]
	_ = x[h323Proxy-165]
	_ = x[mpls-166]
	_ = x[mfSigLink-167]
	_ = x[hdsl2-168]
	_ = x[shdsl-169]
	_ = x[ds1FDL-170]
	_ = x[pos-171]
	_ = x[dvbAsiIn-172]
	_ = x[dvbAsiOut-173]
	_ = x[plc-174]
	_ = x[nfas-175]
	_ = x[tr008-176]
	_ = x[gr303RDT-177]
	_ = x[gr303IDT-178]
	_ = x[isup-179]
	_ = x[propDocsWirelessMaclayer-180]
	_ = x[propDocsWirelessDownstream-181]
	_ = x[propDocsWirelessUpstream-182]
	_ = x[hiperlan2-183]
	_ = x[propBWAp2Mp-184]
	_ = x[sonetOverheadChannel-185]
	_ = x[digitalWrapperOverheadChannel-186]
	_ = x[aal2-187]
	_ = x[radioMAC-188]
	_ = x[atmRadio-189]
	_ = x[imt-190]
	_ = x[mvl-191]
	_ = x[reachDSL-192]
	_ = x[frDlciEndPt-193]
	_ = x[atmVciEndPt-194]
	_ = x[opticalChannel-195]
	_ = x[opticalTransport-196]
	_ = x[propAtm-197]
	_ = x[voiceOverCable-198]
	_ = x[infiniband-199]
	_ = x[teLink-200]
	_ = x[q2931-201]
	_ = x[virtualTg-202]
	_ = x[sipTg-203]
	_ = x[sipSig-204]
	_ = x[docsCableUpstreamChannel-205]
	_ = x[econet-206]
	_ = x[pon155-207]
	_ = x[pon622-208]
	_ = x[bridge-209]
	_ = x[linegroup-210]
	_ = x[voiceEMFGD-211]
	_ = x[voiceFGDEANA-212]
	_ = x[voiceDID-213]
	_ = x[mpegTransport-214]
	_ = x[sixToFour-215]
	_ = x[gtp-216]
	_ = x[pdnEtherLoop1-217]
	_ = x[pdnEtherLoop2-218]
	_ = x[opticalChannelGroup-219]
	_ = x[homepna-220]
	_ = x[gfp-221]
	_ = x[ciscoISLvlan-222]
	_ = x[actelisMetaLOOP-223]
	_ = x[fcipLink-224]
	_ = x[rpr-225]
	_ = x[qam-226]
	_ = x[lmp-227]
	_ = x[cblVectaStar-228]
	_ = x[docsCableMCmtsDownstream-229]
	_ = x[adsl2-230]
	_ = x[macSecControlledIF-231]
	_ = x[macSecUncontrolledIF-232]
	_ = x[aviciOpticalEther-233]
	_ = x[atmbond-234]
	_ = x[voiceFGDOS-235]
	_ = x[mocaVersion1-236]
	_ = x[ieee80216WMAN-237]
	_ = x[adsl2plus-238]
	_ = x[dvbRcsMacLayer-239]
	_ = x[dvbTdm-240]
	_ = x[dvbRcsTdma-241]
	_ = x[x86Laps-242]
	_ = x[wwanPP-243]
	_ = x[wwanPP2-244]
	_ = x[voiceEBS-245]
	_ = x[ifPwType-246]
	_ = x[ilan-247]
	_ = x[pip-248]
	_ = x[aluELP-249]
	_ = x[gpon-250]
	_ = x[vdsl2-251]
	_ = x[capwapDot11Profile-252]
	_ = x[capwapDot11Bss-253]
	_ = x[capwapWtpVirtualRadio-254]
	_ = x[bits-255]
}

const _iface_name = "otherregular1822hdh1822ddnX25rfc877x25ethernetCsmacdiso88023Csmacdiso88024TokenBusiso88025TokenRingiso88026ManstarLanproteon10Mbitproteon80Mbithyperchannelfddilapbsdlcds1e1basicISDNprimaryISDNpropPointToPointSerialpppsoftwareLoopbackeonethernet3Mbitnsipslipultrads3sipframeRelayrs232paraarcnetarcnetPlusatmmiox25sonetx25pleiso88022llclocalTalksmdsDxiframeRelayServicev35hssihippimodemaal5sonetPathsonetVTsmdsIcippropVirtualpropMultiplexorieee80212fibreChannelhippiInterfaceframeRelayInterconnectaflane8023aflane8025cctEmulfastEtherisdnv11v36g703at64kg703at2mbqllcfastEtherFXchannelieee80211ibm370parChanescondlswisdnsisdnulapdipSwitchrsrbatmLogicalds0ds0Bundlebscasynccnriso88025DtreplrsarappropCnlshostPadtermPadframeRelayMPIx213adslradslsdslvdsliso88025CRFPIntmyrinetvoiceEMvoiceFXOvoiceFXSvoiceEncapvoiceOverIpatmDxiatmFuniatmImapppMultilinkBundleipOverCdlcipOverClawstackToStackvirtualIpAddressmpcipOverAtmiso88025FibertdlcgigabitEthernethdlclapfv37x25mlpx25huntGrouptranspHdlcinterleavefastipdocsCableMaclayerdocsCableDownstreamdocsCableUpstreama12MppSwitchtunnelcoffeecesatmSubInterfacel2vlanl3ipvlanl3ipxvlandigitalPowerlinemediaMailOverIpdtmdcnipForwardmsdslieee1394if_gsndvbRccMacLayerdvbRccDownstreamdvbRccUpstreamatmVirtualmplsTunnelsrpvoiceOverAtmvoiceOverFrameRelayidslcompositeLinkss7SigLinkpropWirelessP2PfrForwardrfc1483USBieee8023adLagbgppolicyaccountingfrf16MfrBundleh323Gatekeeperh323ProxymplsmfSigLinkhdsl2shdslds1FDLposdvbAsiIndvbAsiOutplcnfastr008gr303RDTgr303IDTisuppropDocsWirelessMaclayerpropDocsWirelessDownstreampropDocsWirelessUpstreamhiperlan2propBWAp2MpsonetOverheadChanneldigitalWrapperOverheadChannelaal2radioMACatmRadioimtmvlreachDSLfrDlciEndPtatmVciEndPtopticalChannelopticalTransportpropAtmvoiceOverCableinfinibandteLinkq2931virtualTgsipTgsipSigdocsCableUpstreamChanneleconetpon155pon622bridgelinegroupvoiceEMFGDvoiceFGDEANAvoiceDIDmpegTransportsixToFourgtppdnEtherLoop1pdnEtherLoop2opticalChannelGrouphomepnagfpciscoISLvlanactelisMetaLOOPfcipLinkrprqamlmpcblVectaStardocsCableMCmtsDownstreamadsl2macSecControlledIFmacSecUncontrolledIFaviciOpticalEtheratmbondvoiceFGDOSmocaVersion1ieee80216WMANadsl2plusdvbRcsMacLayerdvbTdmdvbRcsTdmax86LapswwanPPwwanPP2voiceEBSifPwTypeilanpipaluELPgponvdsl2capwapDot11ProfilecapwapDot11BsscapwapWtpVirtualRadiobits"

var _iface_index = [...]uint16{0, 5, 16, 23, 29, 38, 52, 66, 82, 99, 110, 117, 130, 143, 155, 159, 163, 167, 170, 172, 181, 192, 214, 217, 233, 236, 249, 253, 257, 262, 265, 268, 278, 283, 287, 293, 303, 306, 312, 317, 323, 334, 343, 350, 367, 370, 374, 379, 384, 388, 397, 404, 412, 423, 438, 447, 459, 473, 495, 505, 515, 522, 531, 535, 538, 541, 550, 559, 563, 574, 581, 590, 603, 608, 612, 617, 622, 626, 634, 638, 648, 651, 660, 663, 668, 671, 682, 687, 691, 699, 706, 713, 726, 730, 734, 739, 743, 747, 762, 769, 776, 784, 792, 802, 813, 819, 826, 832, 850, 860, 870, 882, 898, 901, 910, 923, 927, 942, 946, 950, 953, 959, 971, 981, 991, 995, 997, 1014, 1033, 1050, 1062, 1068, 1074, 1077, 1092, 1098, 1106, 1115, 1131, 1146, 1149, 1152, 1161, 1166, 1174, 1180, 1194, 1210, 1224, 1234, 1244, 1247, 1259, 1278, 1282, 1295, 1305, 1320, 1329, 1336, 1339, 1352, 1371, 1385, 1399, 1408, 1412, 1421, 1426, 1431, 1437, 1440, 1448, 1457, 1460, 1464, 1469, 1477, 1485, 1489, 1513, 1539, 1563, 1572, 1583, 1603, 1632, 1636, 1644, 1652, 1655, 1658, 1666, 1677, 1688, 1702, 1718, 1725, 1739, 1749, 1755, 1760, 1769, 1774, 1780, 1804, 1810, 1816, 1822, 1828, 1837, 1847, 1859, 1867, 1880, 1889, 1892, 1905, 1918, 1937, 1944, 1947, 1959, 1974, 1982, 1985, 1988, 1991, 2003, 2027, 2032, 2050, 2070, 2087, 2094, 2104, 2116, 2129, 2138, 2152, 2158, 2168, 2175, 2181, 2188, 2196, 2204, 2208, 2211, 2217, 2221, 2226, 2244, 2258, 2279, 2283}

func (i iface) String() string {
	i -= 1
	if i >= iface(len(_iface_index)-1) {
		return "iface(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _iface_name[_iface_index[i]:_iface_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unspecified-0]
	_ = x[Unix-1]
	_ = x[IPv4-2]
	_ = x[IPv6-30]
}

const (
	_protocolFamily_name_0 = "UnspecifiedUnixIPv4"
	_protocolFamily_name_1 = "IPv6"
)

var (
	_protocolFamily_index_0 = [...]uint8{0, 11, 15, 19}
)

func (i protocolFamily) String() string {
	switch {
	case i <= 2:
		return _protocolFamily_name_0[_protocolFamily_index_0[i]:_protocolFamily_index_0[i+1]]
	case i == 30:
		return _protocolFamily_name_1
	default:
		return "protocolFamily(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
