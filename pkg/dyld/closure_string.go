// Code generated by "stringer -type=closureType,linkKind -output closure_string.go"; DO NOT EDIT.

package dyld

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[launchClosure-1]
	_ = x[imageArray-2]
	_ = x[image-3]
	_ = x[dlopenClosure-4]
	_ = x[imageFlags-7]
	_ = x[pathWithHash-8]
	_ = x[fileInodeAndTime-9]
	_ = x[cdHash-10]
	_ = x[uuid-11]
	_ = x[mappingInfo-12]
	_ = x[diskSegment-13]
	_ = x[cacheSegment-14]
	_ = x[dependents-15]
	_ = x[initOffsets-16]
	_ = x[dofOffsets-17]
	_ = x[codeSignLoc-18]
	_ = x[farPlayLoc-19]
	_ = x[rebaseFixups-20]
	_ = x[bindFixups-21]
	_ = x[cachePatchInfo-22]
	_ = x[textFixups-23]
	_ = x[imageOverride-24]
	_ = x[initBefores-25]
	_ = x[initsSection-26]
	_ = x[chainedFixupsTargets-27]
	_ = x[termOffsets-28]
	_ = x[chainedStartsOffset-29]
	_ = x[objcFixups-30]
	_ = x[closureFlags-32]
	_ = x[dyldCacheUUID-33]
	_ = x[missingFiles-34]
	_ = x[envVar-35]
	_ = x[topImage-36]
	_ = x[libDyldEntry-37]
	_ = x[libSystemNum-38]
	_ = x[mainEntry-40]
	_ = x[startEntry-41]
	_ = x[cacheOverrides-42]
	_ = x[interposeTuples-43]
	_ = x[existingFiles-44]
	_ = x[selectorTable-45]
	_ = x[classTable-46]
	_ = x[warning-47]
	_ = x[duplicateClassesTable-48]
	_ = x[progVars-49]
}

const (
	_closureType_name_0 = "launchClosureimageArrayimagedlopenClosure"
	_closureType_name_1 = "imageFlagspathWithHashfileInodeAndTimecdHashuuidmappingInfodiskSegmentcacheSegmentdependentsinitOffsetsdofOffsetscodeSignLocfarPlayLocrebaseFixupsbindFixupscachePatchInfotextFixupsimageOverrideinitBeforesinitsSectionchainedFixupsTargetstermOffsetschainedStartsOffsetobjcFixups"
	_closureType_name_2 = "closureFlagsdyldCacheUUIDmissingFilesenvVartopImagelibDyldEntrylibSystemNum"
	_closureType_name_3 = "mainEntrystartEntrycacheOverridesinterposeTuplesexistingFilesselectorTableclassTablewarningduplicateClassesTableprogVars"
)

var (
	_closureType_index_0 = [...]uint8{0, 13, 23, 28, 41}
	_closureType_index_1 = [...]uint16{0, 10, 22, 38, 44, 48, 59, 70, 82, 92, 103, 113, 124, 134, 146, 156, 170, 180, 193, 204, 216, 236, 247, 266, 276}
	_closureType_index_2 = [...]uint8{0, 12, 25, 37, 43, 51, 63, 75}
	_closureType_index_3 = [...]uint8{0, 9, 19, 33, 48, 61, 74, 84, 91, 112, 120}
)

func (i closureType) String() string {
	switch {
	case 1 <= i && i <= 4:
		i -= 1
		return _closureType_name_0[_closureType_index_0[i]:_closureType_index_0[i+1]]
	case 7 <= i && i <= 30:
		i -= 7
		return _closureType_name_1[_closureType_index_1[i]:_closureType_index_1[i+1]]
	case 32 <= i && i <= 38:
		i -= 32
		return _closureType_name_2[_closureType_index_2[i]:_closureType_index_2[i+1]]
	case 40 <= i && i <= 49:
		i -= 40
		return _closureType_name_3[_closureType_index_3[i]:_closureType_index_3[i+1]]
	default:
		return "closureType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[regular-0]
	_ = x[weak-1]
	_ = x[upward-2]
	_ = x[reExport-3]
}

const _linkKind_name = "regularweakupwardreExport"

var _linkKind_index = [...]uint8{0, 7, 11, 17, 25}

func (i linkKind) String() string {
	if i >= linkKind(len(_linkKind_index)-1) {
		return "linkKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _linkKind_name[_linkKind_index[i]:_linkKind_index[i+1]]
}
