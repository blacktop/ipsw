{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This allows you to interact with \u003ccode\u003eipsw\u003c/code\u003e in a VERY powerful and flexible way via a RESTful API.\n\nThe \u003ccode\u003eipswd\u003c/code\u003e design was heavily influenced by the design of dockerd. So many of the same concepts apply.",
    "title": "ipswd API",
    "version": "v1.0"
  },
  "host": "localhost:3993",
  "basePath": "/v1",
  "paths": {
    "/_ping": {
      "get": {
        "description": "This will return \"OK\" if the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "getDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "head": {
        "description": "This will return if 200 the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "headDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/device_list": {
      "get": {
        "description": "This will return JSON of all XCode devices.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DeviceList"
        ],
        "summary": "List XCode Devices.",
        "operationId": "getDeviceList",
        "responses": {
          "200": {
            "$ref": "#/responses/deviceListResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/blobs": {
      "post": {
        "description": "This will return the diff of two text blobs.",
        "tags": [
          "Diff"
        ],
        "summary": "Blobs",
        "operationId": "postDiffBlobs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/files": {
      "post": {
        "description": "This will return the diff of two text files.",
        "tags": [
          "Diff"
        ],
        "summary": "Files",
        "operationId": "postDiffFiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/build": {
      "get": {
        "description": "Get latest iOS build.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Build",
        "operationId": "getDownloadLatestIPSWsBuild",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosBuildResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/version": {
      "get": {
        "description": "Get latest iOS version.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Version",
        "operationId": "getDownloadLatestIPSWsVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2o": {
      "post": {
        "description": "Convert virtual address to file offset.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2o",
        "operationId": "postDscAddrToOff",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Addr",
            "description": "address to convert",
            "name": "addr",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToOffResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2s": {
      "post": {
        "description": "Convert virtual address to symbol.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2s",
        "operationId": "postDscAddrToSym",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64"
            },
            "x-go-name": "Addrs",
            "description": "address to convert",
            "name": "addrs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToSymResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/imports": {
      "get": {
        "description": "Get list of dylibs that import a given dylib.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Imports",
        "operationId": "getDscImports",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscImportsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/info": {
      "get": {
        "description": "Get info about a given DSC",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Info",
        "operationId": "getDscInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/macho": {
      "get": {
        "description": "Get MachO info for a given dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "MachO",
        "operationId": "getDscMacho",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/o2a": {
      "post": {
        "description": "Convert file offset to virtual address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "o2a",
        "operationId": "postDscOffToAddr",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Offset",
            "description": "offset to convert",
            "name": "off",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscOffToAddrResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/slide": {
      "post": {
        "description": "Get slide info for the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Slide Info",
        "operationId": "getDscSlideInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "pattern": "=\"auth\"",
            "type": "string",
            "x-go-name": "Type",
            "description": "filter by mapping type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSlideInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/split": {
      "post": {
        "description": "Split the DSC into its constituent dylibs using XCode's \u003ccode\u003edsc_extractor.bundle\u003c/code\u003e\n\n\u003cb\u003eNOTE:\u003c/b\u003e darwin ONLY",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Split",
        "operationId": "getDscSplit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Output",
            "description": "the folder to output the split dylibs",
            "name": "output",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "XCodePath",
            "description": "the path to the Xcode.app to use for splitting",
            "name": "xcode_path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSplitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/str": {
      "get": {
        "description": "Get strings in the DSC that match a given pattern.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Strings",
        "operationId": "getDscStrings",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "regex to search for",
            "name": "pattern",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscStringsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/symaddr": {
      "post": {
        "description": "Get symbols addresses in the DSC that match a given lookup JSON payload.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Symbols",
        "operationId": "getDscSymbols",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Symbol"
            },
            "x-go-name": "Lookups",
            "description": "symbols to lookup",
            "name": "lookups",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSymbolsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/webkit": {
      "get": {
        "description": "Get \u003ccode\u003ewebkit\u003c/code\u003e version from dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Webkit",
        "operationId": "getDscWebkit",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscWebkitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/extract/dmg": {
      "post": {
        "description": "Extract DMGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DMG",
        "operationId": "getExtractDmg",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_type": {
                  "type": "string",
                  "pattern": "^(app|sys|fs)$"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/dsc": {
      "post": {
        "description": "Extract dyld_shared_caches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DSC",
        "operationId": "getExtractDsc",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "arches": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kbag": {
      "post": {
        "description": "Extract KBAGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "KBAG",
        "operationId": "getExtractKbags",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kernel": {
      "post": {
        "description": "Extract kernelcaches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Kernel",
        "operationId": "getExtractKernel",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/pattern": {
      "post": {
        "description": "Extract files from an IPSW that match a given pattern.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Pattern",
        "operationId": "getExtractPattern",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/sptm": {
      "post": {
        "description": "Extract SPTM and TXM Firmwares.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "SPTM",
        "operationId": "getExtractSPTM",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/idev/info": {
      "get": {
        "description": "Get info about USB connected devices.",
        "tags": [
          "USB"
        ],
        "summary": "Info",
        "operationId": "getIdevInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/idevInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw": {
      "get": {
        "description": "Get IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "IPSW",
        "operationId": "getIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw/remote": {
      "get": {
        "description": "Get remote IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote IPSW",
        "operationId": "getRemoteIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to IPSW",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota": {
      "get": {
        "description": "Get OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "OTA",
        "operationId": "getOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to OTA",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota/remote": {
      "get": {
        "description": "Get remote OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote OTA",
        "operationId": "getRemoteOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to OTA",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/ents": {
      "get": {
        "description": "Get IPSW Filesystem DMG MachO entitlements.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Entitlements",
        "operationId": "getIpswFsEntitlements",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsEntitlementsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/files": {
      "get": {
        "description": "Get IPSW Filesystem DMG file listing.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Files",
        "operationId": "getIpswFsFiles",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsFilesResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/launchd": {
      "get": {
        "description": "Get \u003ccode\u003elaunchd\u003c/code\u003e config from IPSW Filesystem DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "launchd Config",
        "operationId": "getIpswFsLaunchd",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsLaunchdConfigResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/kexts": {
      "get": {
        "description": "Get kernelcache KEXTs info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Kexts",
        "operationId": "getKernelKexts",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelKextsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/syscall": {
      "get": {
        "description": "Get kernelcache syscalls info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Syscalls",
        "operationId": "getKernelSyscalls",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelSyscallsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/version": {
      "get": {
        "description": "Get kernelcache version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Version",
        "operationId": "getKernelVersion",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/macho/info": {
      "get": {
        "description": "Get MachO info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MachO"
        ],
        "summary": "Info",
        "operationId": "getMachoInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to MachO",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "architecture to get info for in universal MachO",
            "name": "arch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/machoInfoResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/mount/{type}": {
      "post": {
        "description": "Mount a DMG inside a given IPSW.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Mount",
        "operationId": "postMount",
        "parameters": [
          {
            "type": "string",
            "description": "type of DMG to mount (app|sys|fs)",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/mountReponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/unmount": {
      "post": {
        "description": "Unmount a previously mounted DMG.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Unmount",
        "operationId": "postUnmount",
        "parameters": [
          {
            "description": "The unmount context (returned from /mount)",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_path": {
                  "type": "string"
                },
                "mount_point": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "schema": {
              "$ref": "#/responses/successResponse"
            }
          },
          "500": {
            "description": "error response",
            "schema": {
              "$ref": "#/responses/genericError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This will return the daemon version info.",
        "tags": [
          "Daemon"
        ],
        "summary": "Version",
        "operationId": "getDaemonVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/versionResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Address is a struct that contains information about a dyld_shared_cache address",
      "type": "object",
      "properties": {
        "cache": {
          "$ref": "#/definitions/address"
        },
        "files": {
          "description": "the virtual addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/address"
          },
          "x-go-name": "Files"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "BlobHeader": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CDFlag": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CFBundle": {
      "type": "object",
      "properties": {
        "allow_user_load": {
          "type": "boolean",
          "x-go-name": "AllowUserLoad"
        },
        "apple_security_extension": {
          "type": "boolean",
          "x-go-name": "AppleSecurityExtension"
        },
        "build_machine_os_build": {
          "type": "string",
          "x-go-name": "BuildMachineOSBuild"
        },
        "bundle_path": {
          "type": "string",
          "x-go-name": "BundlePath"
        },
        "compatible_version": {
          "type": "string",
          "x-go-name": "CompatibleVersion"
        },
        "copyright": {
          "type": "string",
          "x-go-name": "Copyright"
        },
        "development_region": {
          "type": "string",
          "x-go-name": "DevelopmentRegion"
        },
        "executable": {
          "type": "string",
          "x-go-name": "Executable"
        },
        "executable_load_addr": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecutableLoadAddr"
        },
        "get_info_string": {
          "type": "string",
          "x-go-name": "GetInfoString"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "info_dictionary_version": {
          "type": "string",
          "x-go-name": "InfoDictionaryVersion"
        },
        "io_kit_personalities": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "IOKitPersonalities"
        },
        "minimum_os_version": {
          "type": "string",
          "x-go-name": "MinimumOSVersion"
        },
        "module_index": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ModuleIndex"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "os_bundle_libraries": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "OSBundleLibraries"
        },
        "os_bundle_required": {
          "type": "string",
          "x-go-name": "OSBundleRequired"
        },
        "os_kernel_resource": {
          "type": "boolean",
          "x-go-name": "OSKernelResource"
        },
        "package_type": {
          "type": "string",
          "x-go-name": "PackageType"
        },
        "platform_build": {
          "type": "string",
          "x-go-name": "PlatformBuild"
        },
        "platform_name": {
          "type": "string",
          "x-go-name": "PlatformName"
        },
        "platform_version": {
          "type": "string",
          "x-go-name": "PlatformVersion"
        },
        "relative_path": {
          "type": "string",
          "x-go-name": "RelativePath"
        },
        "sdk": {
          "type": "string",
          "x-go-name": "SDK"
        },
        "sdk_build": {
          "type": "string",
          "x-go-name": "SDKBuild"
        },
        "short_version_string": {
          "type": "string",
          "x-go-name": "ShortVersionString"
        },
        "signature": {
          "type": "string",
          "x-go-name": "Signature"
        },
        "supported_platforms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedPlatforms"
        },
        "ui_device_family": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "UIDeviceFamily"
        },
        "ui_required_device_capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UIRequiredDeviceCapabilities"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "xcode": {
          "type": "string",
          "x-go-name": "Xcode"
        },
        "xcode_build": {
          "type": "string",
          "x-go-name": "XcodeBuild"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "CacheMappingAndSlideInfo": {
      "type": "object",
      "properties": {
        "address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "file_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FileOffset"
        },
        "flags": {
          "$ref": "#/definitions/CacheMappingFlag"
        },
        "init_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "max_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "slide_info_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoOffset"
        },
        "slide_info_size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoSize"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CacheMappingFlag": {
      "type": "integer",
      "format": "uint64",
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CacheMappingWithSlideInfo": {
      "type": "object",
      "properties": {
        "Pages": {
          "type": "array",
          "items": {}
        },
        "SlideInfo": {
          "$ref": "#/definitions/slideInfo"
        },
        "address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "file_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FileOffset"
        },
        "flags": {
          "$ref": "#/definitions/CacheMappingFlag"
        },
        "init_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "max_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "slide_info_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoOffset"
        },
        "slide_info_size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoSize"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CdCodeLimit64": {
      "type": "object",
      "properties": {
        "code_limit_64": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CodeLimit64"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdEarliest": {
      "type": "object",
      "properties": {
        "code_limit": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "CodeLimit"
        },
        "flags": {
          "$ref": "#/definitions/CDFlag"
        },
        "hash_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "HashOffset"
        },
        "hash_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "HashSize"
        },
        "hash_type": {
          "$ref": "#/definitions/hashType"
        },
        "ident_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IdentOffset"
        },
        "n_code_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NCodeSlots"
        },
        "n_special_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NSpecialSlots"
        },
        "page_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "PageSize"
        },
        "platform": {
          "$ref": "#/definitions/cdPlatform"
        },
        "version": {
          "$ref": "#/definitions/cdVersion"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdExecSeg": {
      "type": "object",
      "properties": {
        "exec_seg_base": {
          "description": "Version 0x20400 */",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegBase"
        },
        "exec_seg_flags": {
          "$ref": "#/definitions/execSegFlag"
        },
        "exec_seg_limit": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegLimit"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdLinkage": {
      "type": "object",
      "properties": {
        "linkage_hash_type": {
          "description": "Version 0x20600 */",
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageHashType"
        },
        "linkage_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageOffset"
        },
        "linkage_size": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageSize"
        },
        "linkage_truncated": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageTruncated"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdRuntime": {
      "type": "object",
      "properties": {
        "pre_encrypt_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PreEncryptOffset"
        },
        "runtime": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdScatter": {
      "type": "object",
      "properties": {
        "scatter_offset": {
          "description": "Version 0x20100 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ScatterOffset"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CdTeamID": {
      "type": "object",
      "properties": {
        "team_offset": {
          "description": "Version 0x20200 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TeamOffset"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CodeDirectory": {
      "description": "CodeDirectory object",
      "type": "object",
      "properties": {
        "cd_hash": {
          "type": "string",
          "x-go-name": "CDHash"
        },
        "code_limit": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CodeLimit"
        },
        "code_slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeSlot"
          },
          "x-go-name": "CodeSlots"
        },
        "header": {
          "$ref": "#/definitions/CodeDirectoryType"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "linkage_data": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LinkageData"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        },
        "pre_encrypt_slots": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            }
          },
          "x-go-name": "PreEncryptSlots"
        },
        "runtime_version": {
          "type": "string",
          "x-go-name": "RuntimeVersion"
        },
        "scatter": {
          "$ref": "#/definitions/Scatter"
        },
        "special_slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialSlot"
          },
          "x-go-name": "SpecialSlots"
        },
        "team_id": {
          "type": "string",
          "x-go-name": "TeamID"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CodeDirectoryType": {
      "description": "CodeDirectoryType header",
      "type": "object",
      "properties": {
        "code_limit": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "CodeLimit"
        },
        "code_limit_64": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CodeLimit64"
        },
        "exec_seg_base": {
          "description": "Version 0x20400 */",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegBase"
        },
        "exec_seg_flags": {
          "$ref": "#/definitions/execSegFlag"
        },
        "exec_seg_limit": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegLimit"
        },
        "flags": {
          "$ref": "#/definitions/CDFlag"
        },
        "hash_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "HashOffset"
        },
        "hash_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "HashSize"
        },
        "hash_type": {
          "$ref": "#/definitions/hashType"
        },
        "ident_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IdentOffset"
        },
        "linkage_hash_type": {
          "description": "Version 0x20600 */",
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageHashType"
        },
        "linkage_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageOffset"
        },
        "linkage_size": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageSize"
        },
        "linkage_truncated": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageTruncated"
        },
        "n_code_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NCodeSlots"
        },
        "n_special_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NSpecialSlots"
        },
        "page_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "PageSize"
        },
        "platform": {
          "$ref": "#/definitions/cdPlatform"
        },
        "pre_encrypt_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PreEncryptOffset"
        },
        "runtime": {
          "$ref": "#/definitions/Version"
        },
        "scatter_offset": {
          "description": "Version 0x20100 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ScatterOffset"
        },
        "team_offset": {
          "description": "Version 0x20200 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TeamOffset"
        },
        "version": {
          "$ref": "#/definitions/cdVersion"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CodeSignature": {
      "description": "CodeSignature object",
      "type": "object",
      "properties": {
        "cms_signature": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "CMSSignature"
        },
        "code_directories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeDirectory"
          },
          "x-go-name": "CodeDirectories"
        },
        "entitlements": {
          "type": "string",
          "x-go-name": "Entitlements"
        },
        "entitlements_der": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "EntitlementsDER"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Requirement"
          },
          "x-go-name": "Requirements"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign"
    },
    "CodeSlot": {
      "type": "object",
      "properties": {
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Hash"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        },
        "page": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Page"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Device": {
      "description": "Device object",
      "type": "object",
      "properties": {
        "compatible_device_fallback": {
          "type": "string",
          "x-go-name": "CompatibleDeviceFallback"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        },
        "product_description": {
          "type": "string",
          "x-go-name": "ProductDescription"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "target_type": {
          "type": "string",
          "x-go-name": "TargetType"
        },
        "target_variant": {
          "type": "string",
          "x-go-name": "TargetVariant"
        },
        "traits": {
          "$ref": "#/definitions/DeviceTrait"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/xcode"
    },
    "DeviceTrait": {
      "description": "DeviceTrait object",
      "type": "object",
      "properties": {
        "artwork_device_idiom": {
          "type": "string",
          "x-go-name": "ArtworkDeviceIdiom"
        },
        "artwork_device_subtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtworkDeviceSubtype"
        },
        "artwork_display_gamut": {
          "type": "string",
          "x-go-name": "ArtworkDisplayGamut"
        },
        "artwork_dynamic_display_mode": {
          "type": "string",
          "x-go-name": "ArtworkDynamicDisplayMode"
        },
        "artwork_hosted_idioms": {
          "type": "string",
          "x-go-name": "ArtworkHostedIdioms"
        },
        "artwork_scale_factor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtworkScaleFactor"
        },
        "device_performance_memory_class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DevicePerformanceMemoryClass"
        },
        "graphics_feature_set_class": {
          "type": "string",
          "x-go-name": "GraphicsFeatureSetClass"
        },
        "graphics_feature_set_fallbacks": {
          "type": "string",
          "x-go-name": "GraphicsFeatureSetFallbacks"
        },
        "preferred_architecture": {
          "type": "string",
          "x-go-name": "PreferredArchitecture"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/xcode"
    },
    "DeviceValues": {
      "type": "object",
      "properties": {
        "activation_state": {
          "type": "string",
          "x-go-name": "ActivationState"
        },
        "activation_state_acknowledged": {
          "type": "boolean",
          "x-go-name": "ActivationStateAcknowledged"
        },
        "baseband_activation_ticket_version": {
          "type": "string",
          "x-go-name": "BasebandActivationTicketVersion"
        },
        "baseband_cert_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BasebandCertID"
        },
        "baseband_chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BasebandChipID"
        },
        "baseband_key_hash_information": {
          "type": "object",
          "properties": {
            "a_key_status": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "AKeyStatus"
            },
            "s_key_hash": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              },
              "x-go-name": "SKeyHash"
            },
            "s_key_status": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "SKeyStatus"
            }
          },
          "x-go-name": "BasebandKeyHashInformation"
        },
        "baseband_master_key_hash": {
          "type": "string",
          "x-go-name": "BasebandMasterKeyHash"
        },
        "baseband_region_sku": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BasebandRegionSKU"
        },
        "baseband_serial_number": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BasebandSerialNumber"
        },
        "baseband_status": {
          "type": "string",
          "x-go-name": "BasebandStatus"
        },
        "baseband_version": {
          "type": "string",
          "x-go-name": "BasebandVersion"
        },
        "bluetooth_address": {
          "type": "string",
          "x-go-name": "BluetoothAddress"
        },
        "board_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BoardID"
        },
        "boot_session_id": {
          "type": "string",
          "x-go-name": "BootSessionID"
        },
        "bootstrap_version": {
          "type": "string",
          "x-go-name": "BootstrapVersion"
        },
        "brick_state": {
          "type": "boolean",
          "x-go-name": "BrickState"
        },
        "build_version": {
          "type": "string",
          "x-go-name": "BuildVersion"
        },
        "carrier_bundle_info_array": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {}
          },
          "x-go-name": "CarrierBundleInfoArray"
        },
        "cert_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CertID"
        },
        "chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChipID"
        },
        "chip_serial_no": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ChipSerialNo"
        },
        "cpu_architecture": {
          "type": "string",
          "x-go-name": "CPUArchitecture"
        },
        "ct_postponement_info_pri_version": {
          "type": "string",
          "x-go-name": "CTPostponementInfoPRIVersion"
        },
        "ct_postponement_info_prl_name": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CTPostponementInfoPRLName"
        },
        "ct_postponement_info_service_provisioning_state": {
          "type": "boolean",
          "x-go-name": "CTPostponementInfoServiceProvisioningState"
        },
        "ct_postponement_status": {
          "type": "string",
          "x-go-name": "CTPostponementStatus"
        },
        "device_class": {
          "type": "string",
          "x-go-name": "DeviceClass"
        },
        "device_color": {
          "type": "string",
          "x-go-name": "DeviceColor"
        },
        "device_name": {
          "type": "string",
          "x-go-name": "DeviceName"
        },
        "die_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DieID"
        },
        "ethernet_address": {
          "type": "string",
          "x-go-name": "EthernetAddress"
        },
        "firmware_version": {
          "type": "string",
          "x-go-name": "FirmwareVersion"
        },
        "fusing_status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FusingStatus"
        },
        "gid_1": {
          "type": "string",
          "x-go-name": "GID1"
        },
        "gid_2": {
          "type": "string",
          "x-go-name": "GID2"
        },
        "hardware_model": {
          "type": "string",
          "x-go-name": "HardwareModel"
        },
        "hardware_platform": {
          "type": "string",
          "x-go-name": "HardwarePlatform"
        },
        "has_si_dp": {
          "type": "boolean",
          "x-go-name": "HasSiDP"
        },
        "host_attached": {
          "type": "boolean",
          "x-go-name": "HostAttached"
        },
        "integrated_circuit_card_identity": {
          "type": "string",
          "x-go-name": "IntegratedCircuitCardIdentity"
        },
        "international_mobile_equipment_identity": {
          "type": "string",
          "x-go-name": "InternationalMobileEquipmentIdentity"
        },
        "international_mobile_equipment_identity_2": {
          "type": "string",
          "x-go-name": "InternationalMobileEquipmentIdentity2"
        },
        "international_mobile_subscriber_identity": {
          "type": "string",
          "x-go-name": "InternationalMobileSubscriberIdentity"
        },
        "international_mobile_subscriber_identity_override": {
          "type": "boolean",
          "x-go-name": "InternationalMobileSubscriberIdentityOverride"
        },
        "mlb_serial_number": {
          "type": "string",
          "x-go-name": "MLBSerialNumber"
        },
        "mobile_equipment_identifier": {
          "type": "string",
          "x-go-name": "MobileEquipmentIdentifier"
        },
        "mobile_subscriber_country_code": {
          "type": "string",
          "x-go-name": "MobileSubscriberCountryCode"
        },
        "mobile_subscriber_network_code": {
          "type": "string",
          "x-go-name": "MobileSubscriberNetworkCode"
        },
        "model_number": {
          "type": "string",
          "x-go-name": "ModelNumber"
        },
        "non_volatile_ram": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "NonVolatileRAM"
        },
        "pair_record_protection_class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PairRecordProtectionClass"
        },
        "partition_type": {
          "type": "string",
          "x-go-name": "PartitionType"
        },
        "password_protected": {
          "type": "boolean",
          "x-go-name": "PasswordProtected"
        },
        "phone_number": {
          "type": "string",
          "x-go-name": "PhoneNumber"
        },
        "pk_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PkHash"
        },
        "pri_version___major": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_Major"
        },
        "pri_version___minor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_Minor"
        },
        "pri_version___release_no": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_ReleaseNo"
        },
        "product_name": {
          "type": "string",
          "x-go-name": "ProductName"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        },
        "product_version": {
          "type": "string",
          "x-go-name": "ProductVersion"
        },
        "production_soc": {
          "type": "boolean",
          "x-go-name": "ProductionSOC"
        },
        "protocol_version": {
          "type": "string",
          "x-go-name": "ProtocolVersion"
        },
        "proximity_sensor_calibration": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ProximitySensorCalibration"
        },
        "region_info": {
          "type": "string",
          "x-go-name": "RegionInfo"
        },
        "release_type": {
          "type": "string",
          "x-go-name": "ReleaseType"
        },
        "serial_number": {
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "sim1_is_bootstrap": {
          "type": "boolean",
          "x-go-name": "SIM1IsBootstrap"
        },
        "sim_1_is_embedded": {
          "type": "boolean",
          "x-go-name": "SIM1IsEmbedded"
        },
        "sim_status": {
          "x-go-name": "SIMStatus"
        },
        "sim_tray_status": {
          "x-go-name": "SIMTrayStatus"
        },
        "simgid_1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SIMGID1"
        },
        "simgid_2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SIMGID2"
        },
        "software_behavior": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SoftwareBehavior"
        },
        "software_bundle_version": {
          "type": "string",
          "x-go-name": "SoftwareBundleVersion"
        },
        "supported_device_families": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "SupportedDeviceFamilies"
        },
        "telephony_capability": {
          "type": "boolean",
          "x-go-name": "TelephonyCapability"
        },
        "time_interval_since_1970": {
          "type": "number",
          "format": "double",
          "x-go-name": "TimeIntervalSince1970"
        },
        "time_zone": {
          "type": "string",
          "x-go-name": "TimeZone"
        },
        "time_zone_offset_from_utc": {
          "type": "number",
          "format": "double",
          "x-go-name": "TimeZoneOffsetFromUTC"
        },
        "trusted_host_attached": {
          "type": "boolean",
          "x-go-name": "TrustedHostAttached"
        },
        "unique_chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueChipID"
        },
        "unique_device_id": {
          "type": "string",
          "x-go-name": "UniqueDeviceID"
        },
        "untrusted_host_buid": {
          "type": "string",
          "x-go-name": "UntrustedHostBUID"
        },
        "use_raptor_certs": {
          "type": "boolean",
          "x-go-name": "UseRaptorCerts"
        },
        "uses_24_hour_clock": {
          "type": "boolean",
          "x-go-name": "Uses24HourClock"
        },
        "wi_fi_address": {
          "type": "string",
          "x-go-name": "WiFiAddress"
        },
        "wireless_board_serial_number": {
          "type": "string",
          "x-go-name": "WirelessBoardSerialNumber"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/usb/lockdownd"
    },
    "Dylib": {
      "description": "Dylib is a struct that contains information about a dyld_shared_cache dylib",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "load_address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "LoadAddress"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "File": {
      "type": "object",
      "properties": {
        "ModTime": {
          "type": "string",
          "format": "date-time"
        },
        "Mode": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/api/server/routes/ipsw"
    },
    "ImportedBy": {
      "description": "ImportedBy is a struct that contains information about which dyld_shared_cache dylibs import a given dylib",
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Apps"
        },
        "dsc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DSC"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Info": {
      "description": "Info is a struct that contains information about a dyld_shared_cache file",
      "type": "object",
      "properties": {
        "code_signature": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CodeSignature"
          },
          "x-go-name": "CodeSignature"
        },
        "dylibs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dylib"
          },
          "x-go-name": "Dylibs"
        },
        "magic": {
          "type": "string",
          "x-go-name": "Magic"
        },
        "mappings": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CacheMappingWithSlideInfo"
            }
          },
          "x-go-name": "Mappings"
        },
        "max_slide": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxSlide"
        },
        "num_sub_caches": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SubCacheArrayCount"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        },
        "sub_cache_group_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SubCacheGroupID"
        },
        "sym_sub_cache_uuid": {
          "type": "string",
          "x-go-name": "SymSubCacheUUID"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "KernelVersion": {
      "type": "object",
      "title": "KernelVersion represents the kernel version.",
      "properties": {
        "arch": {
          "description": "The kernel architecture",
          "type": "string",
          "x-go-name": "Arch"
        },
        "cpu": {
          "description": "The kernel CPU",
          "type": "string",
          "x-go-name": "CPU"
        },
        "darwin": {
          "description": "The darwin version",
          "type": "string",
          "x-go-name": "Darwin"
        },
        "date": {
          "description": "The build date",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "type": {
          "description": "The kernel type",
          "type": "string",
          "x-go-name": "Type"
        },
        "xnu": {
          "description": "The xnu version",
          "type": "string",
          "x-go-name": "XNU"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "LLVMVersion": {
      "type": "object",
      "title": "LLVMVersion represents the LLVM version used to compile the kernel.",
      "properties": {
        "clang": {
          "description": "The LLVM compiler",
          "type": "string",
          "x-go-name": "Clang"
        },
        "flags": {
          "description": "The LLVM compiler flags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Flags"
        },
        "version": {
          "description": "The LLVM version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "Magic": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Offset": {
      "description": "Offset is a struct that contains information about a dyld_shared_cache offset",
      "type": "object",
      "properties": {
        "cache": {
          "$ref": "#/definitions/offset"
        },
        "file": {
          "$ref": "#/definitions/offset"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Rebase": {
      "type": "object",
      "properties": {
        "cache_file_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CacheFileOffset"
        },
        "cache_vm_address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CacheVMAddress"
        },
        "pointer": {
          "x-go-name": "Pointer"
        },
        "symbol": {
          "type": "string",
          "x-go-name": "Symbol"
        },
        "target": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "Requirement": {
      "description": "Requirement object",
      "type": "object",
      "properties": {
        "data": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Data"
        },
        "detail": {
          "type": "string",
          "x-go-name": "Detail"
        },
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        },
        "offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Offset"
        },
        "type": {
          "$ref": "#/definitions/RequirementType"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "RequirementType": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Requirements": {
      "description": "Requirements object",
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Offset"
        },
        "type": {
          "$ref": "#/definitions/RequirementType"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "RequirementsBlob": {
      "description": "RequirementsBlob object",
      "type": "object",
      "properties": {
        "data": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Data"
        },
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Scatter": {
      "description": "Scatter object",
      "type": "object",
      "properties": {
        "base": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Base"
        },
        "count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Count"
        },
        "target_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetOffset"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "SpecialSlot": {
      "type": "object",
      "properties": {
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Hash"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "String": {
      "description": "String is a struct that contains information about a dyld_shared_cache string",
      "type": "object",
      "properties": {
        "address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "string": {
          "type": "string",
          "x-go-name": "String"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Symbol": {
      "description": "Symbol is a struct that contains information about a dyld_shared_cache symbol",
      "type": "object",
      "required": [
        "pattern"
      ],
      "properties": {
        "address": {
          "description": "The address of the symbol",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "image": {
          "description": "The image that contains the symbol",
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "description": "The name of the symbol",
          "type": "string",
          "x-go-name": "Name"
        },
        "pattern": {
          "description": "The lookup pattern used to find the symbol",
          "type": "string",
          "x-go-name": "Pattern"
        },
        "type": {
          "description": "The type of the symbol",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "SymbolLookup": {
      "description": "SymbolLookup is a struct that contains information about a dyld_shared_cache symbol lookup",
      "type": "object",
      "properties": {
        "address": {
          "description": "The address of the symbol",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "demanged": {
          "description": "The demangled symbol name",
          "type": "string",
          "x-go-name": "Demanged"
        },
        "ext": {
          "description": "The DSC sub-cache file extension",
          "type": "string",
          "x-go-name": "Extension"
        },
        "image": {
          "description": "The containing image name",
          "type": "string",
          "x-go-name": "Image"
        },
        "mapping": {
          "description": "The DSC mapping name",
          "type": "string",
          "x-go-name": "Mapping"
        },
        "section": {
          "description": "The containing image section",
          "type": "string",
          "x-go-name": "Section"
        },
        "segment": {
          "description": "The containing image segment",
          "type": "string",
          "x-go-name": "Segment"
        },
        "stub_island": {
          "description": "Is the symbol in a DSC stub island",
          "type": "boolean",
          "x-go-name": "StubIsland"
        },
        "symbol": {
          "description": "The symbol name",
          "type": "string",
          "x-go-name": "Symbol"
        },
        "uuid": {
          "description": "The DSC sub-cache UUID",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Sysent": {
      "type": "object",
      "properties": {
        "arg_bytes": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "ArgBytes"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Args"
        },
        "call": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Call"
        },
        "munge": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Munge"
        },
        "n_arg": {
          "type": "integer",
          "format": "int16",
          "x-go-name": "NArg"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "new": {
          "type": "boolean",
          "x-go-name": "New"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "old": {
          "type": "boolean",
          "x-go-name": "Old"
        },
        "old_name": {
          "type": "string",
          "x-go-name": "DBName"
        },
        "proto": {
          "type": "string",
          "x-go-name": "Proto"
        },
        "return_type": {
          "$ref": "#/definitions/returnType"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "Version": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "VmProtection": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "address": {
      "type": "object",
      "properties": {
        "address": {
          "description": "the offset in the DSC sub-cache",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "sub_cache": {
          "$ref": "#/definitions/subCache"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "cdPlatform": {
      "type": "integer",
      "format": "uint8",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "cdVersion": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "execSegFlag": {
      "type": "integer",
      "format": "uint64",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "hashType": {
      "type": "integer",
      "format": "uint8",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "offset": {
      "type": "object",
      "properties": {
        "offset": {
          "description": "the file offset in the DSC sub-cache",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Offset"
        },
        "sub_cache": {
          "$ref": "#/definitions/subCache"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "returnType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "slideInfo": {
      "type": "object",
      "properties": {
        "GetPageSize": {
          "type": "integer",
          "format": "uint32"
        },
        "GetVersion": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "subCache": {
      "type": "object",
      "properties": {
        "ext": {
          "description": "the DSC sub-cache file extension",
          "type": "string",
          "x-go-name": "Extension"
        },
        "mapping": {
          "description": "the DSC sub-cache mapping name",
          "type": "string",
          "x-go-name": "Mapping"
        },
        "stubs": {
          "description": "is the offset in a DSC stub island",
          "type": "boolean",
          "x-go-name": "InStubs"
        },
        "uuid": {
          "description": "the DSC sub-cache UUID",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    }
  },
  "responses": {
    "deviceListResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "diffResponse": {
      "description": "",
      "headers": {
        "diff": {
          "type": "string"
        }
      }
    },
    "dscAddrToOffResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/offset"
      },
      "headers": {
        "cache": {
          "description": "the vmcache offset"
        },
        "file": {
          "description": "the file offset"
        }
      }
    },
    "dscAddrToSymResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SymbolLookup"
        }
      }
    },
    "dscImportsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ImportedBy"
      },
      "headers": {
        "imported_by": {
          "description": "The list of dylibs/apps that import the specified dylib"
        },
        "path": {
          "type": "string",
          "description": "The path to the DSC file"
        }
      }
    },
    "dscInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscMachoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/File"
      },
      "headers": {
        "macho": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscOffToAddrResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/address"
      },
      "headers": {
        "cache": {
          "description": "the vmcache address"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/address"
          },
          "description": "the virtual addresses"
        }
      }
    },
    "dscSlideInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CacheMappingWithSlideInfo"
      },
      "headers": {
        "mapping": {},
        "rebases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rebase"
          }
        }
      }
    },
    "dscSplitResponse": {
      "description": "",
      "headers": {
        "dylibs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "dscStringsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "strings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/String"
          }
        }
      }
    },
    "dscSymbolsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "symbols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Symbol"
          }
        }
      }
    },
    "dscWebkitResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "webkit": {
          "type": "string"
        }
      }
    },
    "extractReponse": {
      "description": "The extract response message",
      "headers": {
        "artifacts": {
          "minItems": 0,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of extracted files"
        }
      }
    },
    "genericError": {
      "description": "",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "getFsEntitlementsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      },
      "headers": {
        "entitlements": {},
        "path": {
          "type": "string"
        }
      }
    },
    "getFsFilesResponse": {
      "description": "FS files response",
      "headers": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          },
          "description": "The files in the IPSW filesystem"
        },
        "path": {
          "type": "string",
          "description": "The path to the IPSW"
        }
      }
    },
    "getFsLaunchdConfigResponse": {
      "description": "",
      "headers": {
        "launchd_config": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "idevInfoResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceValues"
          }
        }
      }
    },
    "infoRemoteResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "infoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "kernelKextsResponse": {
      "description": "",
      "headers": {
        "kexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CFBundle"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "kernelSyscallsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "syscalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sysent"
          }
        }
      }
    },
    "kernelVersionResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Version"
      },
      "headers": {
        "path": {
          "type": "string"
        },
        "version": {}
      }
    },
    "kernelcacheVersion": {
      "description": "Version represents the kernel version and LLVM version.",
      "headers": {
        "arch": {
          "type": "string",
          "description": "The kernel architecture"
        },
        "clang": {
          "type": "string",
          "description": "The LLVM compiler"
        },
        "cpu": {
          "type": "string",
          "description": "The kernel CPU"
        },
        "darwin": {
          "type": "string",
          "description": "The darwin version"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The build date"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The LLVM compiler flags"
        },
        "rawKernel": {
          "type": "string"
        },
        "rawLLVM": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The kernel type"
        },
        "version": {
          "type": "string",
          "description": "The LLVM version"
        },
        "xnu": {
          "type": "string",
          "description": "The xnu version"
        }
      }
    },
    "latestIpswIosBuildResponse": {
      "description": "",
      "headers": {
        "build": {
          "type": "string"
        }
      }
    },
    "latestIpswIosVersionResponse": {
      "description": "",
      "headers": {
        "version": {
          "type": "string"
        }
      }
    },
    "machoInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/File"
      },
      "headers": {
        "arch": {
          "type": "string"
        },
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "mountReponse": {
      "description": "",
      "headers": {
        "already_mounted": {
          "type": "boolean"
        },
        "dmg_path": {
          "type": "string"
        },
        "mount_point": {
          "type": "string"
        }
      }
    },
    "successResponse": {
      "description": "",
      "headers": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "versionResponse": {
      "description": "",
      "headers": {
        "api_version": {
          "type": "string"
        },
        "builder_version": {
          "type": "string"
        },
        "os_type": {
          "type": "string"
        }
      }
    }
  }
}