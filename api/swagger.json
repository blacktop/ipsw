{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This allows you to interact with \u003ccode\u003eipsw\u003c/code\u003e in a VERY powerful and flexible way via a RESTful API.\n\nThe \u003ccode\u003eipswd\u003c/code\u003e design was heavily influenced by the design of dockerd. So many of the same concepts apply.",
    "title": "ipswd API",
    "version": "v1.0"
  },
  "host": "localhost:3993",
  "basePath": "/v1",
  "paths": {
    "/_ping": {
      "get": {
        "description": "This will return \"OK\" if the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "getDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "head": {
        "description": "This will return if 200 the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "headDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/device_list": {
      "get": {
        "description": "This will return JSON of all XCode devices.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DeviceList"
        ],
        "summary": "List XCode Devices.",
        "operationId": "getDeviceList",
        "responses": {
          "200": {
            "$ref": "#/responses/deviceListResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/blobs": {
      "post": {
        "description": "This will return the diff of two text blobs.",
        "tags": [
          "Diff"
        ],
        "summary": "Blobs",
        "operationId": "postDiffBlobs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/files": {
      "post": {
        "description": "This will return the diff of two text files.",
        "tags": [
          "Diff"
        ],
        "summary": "Files",
        "operationId": "postDiffFiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/build": {
      "get": {
        "description": "Get latest iOS build.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Build",
        "operationId": "getDownloadLatestIPSWsBuild",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosBuildResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/version": {
      "get": {
        "description": "Get latest iOS version.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Version",
        "operationId": "getDownloadLatestIPSWsVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2o": {
      "post": {
        "description": "Convert virtual address to file offset.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2o",
        "operationId": "postDscAddrToOff",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Addr",
            "description": "address to convert",
            "name": "addr",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToOffResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2s": {
      "post": {
        "description": "Convert virtual address to symbol.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2s",
        "operationId": "postDscAddrToSym",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64"
            },
            "x-go-name": "Addrs",
            "description": "address to convert",
            "name": "addrs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToSymResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/imports": {
      "get": {
        "description": "Get list of dylibs that import a given dylib.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Imports",
        "operationId": "getDscImports",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscImportsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/info": {
      "get": {
        "description": "Get info about a given DSC",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Info",
        "operationId": "getDscInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/macho": {
      "get": {
        "description": "Get MachO info for a given dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "MachO",
        "operationId": "getDscMacho",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/o2a": {
      "post": {
        "description": "Convert file offset to virtual address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "o2a",
        "operationId": "postDscOffToAddr",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Offset",
            "description": "offset to convert",
            "name": "off",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscOffToAddrResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/slide": {
      "post": {
        "description": "Get slide info for the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Slide Info",
        "operationId": "getDscSlideInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "pattern": "=\"auth\"",
            "type": "string",
            "x-go-name": "Type",
            "description": "filter by mapping type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSlideInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/split": {
      "post": {
        "description": "Split the DSC into its constituent dylibs using XCode's \u003ccode\u003edsc_extractor.bundle\u003c/code\u003e\n\n\u003cb\u003eNOTE:\u003c/b\u003e darwin ONLY",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Split",
        "operationId": "getDscSplit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Output",
            "description": "the folder to output the split dylibs",
            "name": "output",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "XCodePath",
            "description": "the path to the Xcode.app to use for splitting",
            "name": "xcode_path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSplitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/str": {
      "get": {
        "description": "Get strings in the DSC that match a given pattern.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Strings",
        "operationId": "getDscStrings",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "regex to search for",
            "name": "pattern",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscStringsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/symaddr": {
      "post": {
        "description": "Get symbols addresses in the DSC that match a given lookup JSON payload.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Symbols",
        "operationId": "getDscSymbols",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {},
            "x-go-name": "Lookups",
            "description": "symbols to lookup",
            "name": "lookups",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSymbolsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/webkit": {
      "get": {
        "description": "Get \u003ccode\u003ewebkit\u003c/code\u003e version from dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Webkit",
        "operationId": "getDscWebkit",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscWebkitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/extract/dmg": {
      "post": {
        "description": "Extract DMGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DMG",
        "operationId": "getExtractDmg",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_type": {
                  "type": "string",
                  "pattern": "^(app|sys|fs)$"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/dsc": {
      "post": {
        "description": "Extract dyld_shared_caches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DSC",
        "operationId": "getExtractDsc",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "arches": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kbag": {
      "post": {
        "description": "Extract KBAGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "KBAG",
        "operationId": "getExtractKbags",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kernel": {
      "post": {
        "description": "Extract kernelcaches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Kernel",
        "operationId": "getExtractKernel",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/pattern": {
      "post": {
        "description": "Extract files from an IPSW that match a given pattern.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Pattern",
        "operationId": "getExtractPattern",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/idev/info": {
      "get": {
        "description": "Get info about USB connected devices.",
        "tags": [
          "USB"
        ],
        "summary": "Info",
        "operationId": "getIdevInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/idevInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw": {
      "get": {
        "description": "Get IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "IPSW",
        "operationId": "getIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw/remote": {
      "get": {
        "description": "Get remote IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote IPSW",
        "operationId": "getRemoteIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to IPSW",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota": {
      "get": {
        "description": "Get OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "OTA",
        "operationId": "getOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to OTA",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota/remote": {
      "get": {
        "description": "Get remote OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote OTA",
        "operationId": "getRemoteOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to OTA",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/ents": {
      "get": {
        "description": "Get IPSW Filesystem DMG MachO entitlements.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Entitlements",
        "operationId": "getIpswFsEntitlements",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsEntitlementsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/files": {
      "get": {
        "description": "Get IPSW Filesystem DMG file listing.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Files",
        "operationId": "getIpswFsFiles",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsFilesResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/launchd": {
      "get": {
        "description": "Get \u003ccode\u003elaunchd\u003c/code\u003e config from IPSW Filesystem DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "launchd Config",
        "operationId": "getIpswFsLaunchd",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsLaunchdConfigResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/kexts": {
      "get": {
        "description": "Get kernelcache KEXTs info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Kexts",
        "operationId": "getKernelKexts",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelKextsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/syscall": {
      "get": {
        "description": "Get kernelcache syscalls info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Syscalls",
        "operationId": "getKernelSyscalls",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelSyscallsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/version": {
      "get": {
        "description": "Get kernelcache version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Version",
        "operationId": "getKernelVersion",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/macho/info": {
      "get": {
        "description": "Get MachO info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MachO"
        ],
        "summary": "Info",
        "operationId": "getMachoInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to MachO",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "architecture to get info for in universal MachO",
            "name": "arch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/machoInfoResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/mount/{type}": {
      "post": {
        "description": "Mount a DMG inside a given IPSW.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Mount",
        "operationId": "postMount",
        "parameters": [
          {
            "type": "string",
            "description": "type of DMG to mount (app|sys|fs)",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/mountReponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/unmount": {
      "post": {
        "description": "Unmount a previously mounted DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Unmount",
        "operationId": "postUnmount",
        "parameters": [
          {
            "type": "string",
            "description": "mount point of DMG",
            "name": "mount_point",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to DMG",
            "name": "dmg_path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This will return the daemon version info.",
        "tags": [
          "Daemon"
        ],
        "summary": "Version",
        "operationId": "getDaemonVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/versionResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Address is a struct that contains information about a dyld_shared_cache address",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Dylib": {
      "description": "Dylib is a struct that contains information about a dyld_shared_cache dylib",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "File": {
      "x-go-package": "github.com/blacktop/ipsw/api/server/routes/ipsw"
    },
    "ImportedBy": {
      "description": "ImportedBy is a struct that contains information about which dyld_shared_cache dylibs import a given dylib",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Info": {
      "description": "Info is a struct that contains information about a dyld_shared_cache file",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "KernelVersion": {
      "title": "KernelVersion represents the kernel version.",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "LLVMVersion": {
      "title": "LLVMVersion represents the LLVM version used to compile the kernel.",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "Offset": {
      "description": "Offset is a struct that contains information about a dyld_shared_cache offset",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "String": {
      "description": "String is a struct that contains information about a dyld_shared_cache string",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Symbol": {
      "description": "Symbol is a struct that contains information about a dyld_shared_cache symbol",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "address": {
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "offset": {
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "subCache": {
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    }
  },
  "responses": {
    "deviceListResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {}
        }
      }
    },
    "diffResponse": {
      "description": "",
      "headers": {
        "diff": {
          "type": "string"
        }
      }
    },
    "dscAddrToOffResponse": {
      "description": "",
      "headers": {
        "cache": {
          "description": "the vmcache offset"
        },
        "file": {
          "description": "the file offset"
        }
      }
    },
    "dscAddrToSymResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {}
      }
    },
    "dscImportsResponse": {
      "description": "",
      "headers": {
        "imported_by": {
          "description": "The list of dylibs/apps that import the specified dylib"
        },
        "path": {
          "type": "string",
          "description": "The path to the DSC file"
        }
      }
    },
    "dscInfoResponse": {
      "description": "",
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscMachoResponse": {
      "description": "",
      "headers": {
        "macho": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscOffToAddrResponse": {
      "description": "",
      "headers": {
        "cache": {
          "description": "the vmcache address"
        },
        "files": {
          "type": "array",
          "items": {},
          "description": "the virtual addresses"
        }
      }
    },
    "dscSlideInfoResponse": {
      "description": "",
      "headers": {
        "mapping": {},
        "rebases": {
          "type": "array",
          "items": {}
        }
      }
    },
    "dscSplitResponse": {
      "description": "",
      "headers": {
        "dylibs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "dscStringsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "strings": {
          "type": "array",
          "items": {}
        }
      }
    },
    "dscSymbolsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "symbols": {
          "type": "array",
          "items": {}
        }
      }
    },
    "dscWebkitResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "webkit": {
          "type": "string"
        }
      }
    },
    "extractReponse": {
      "description": "The extract response message",
      "headers": {
        "artifacts": {
          "minItems": 0,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of extracted files"
        }
      }
    },
    "genericError": {
      "description": "",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "getFsEntitlementsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {}
      },
      "headers": {
        "entitlements": {},
        "path": {
          "type": "string"
        }
      }
    },
    "getFsFilesResponse": {
      "description": "FS files response",
      "headers": {
        "files": {
          "type": "array",
          "items": {},
          "description": "The files in the IPSW filesystem"
        },
        "path": {
          "type": "string",
          "description": "The path to the IPSW"
        }
      }
    },
    "getFsLaunchdConfigResponse": {
      "description": "",
      "headers": {
        "launchd_config": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "idevInfoResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {}
        }
      }
    },
    "infoRemoteResponse": {
      "description": "",
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "infoResponse": {
      "description": "",
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "kernelKextsResponse": {
      "description": "",
      "headers": {
        "kexts": {
          "type": "array",
          "items": {}
        },
        "path": {
          "type": "string"
        }
      }
    },
    "kernelSyscallsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "syscalls": {
          "type": "array",
          "items": {}
        }
      }
    },
    "kernelVersionResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "version": {}
      }
    },
    "kernelcacheVersion": {
      "description": "Version represents the kernel version and LLVM version.",
      "headers": {
        "arch": {
          "type": "string",
          "description": "The kernel architecture"
        },
        "clang": {
          "type": "string",
          "description": "The LLVM compiler"
        },
        "cpu": {
          "type": "string",
          "description": "The kernel CPU"
        },
        "darwin": {
          "type": "string",
          "description": "The darwin version"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The build date"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The LLVM compiler flags"
        },
        "rawKernel": {
          "type": "string"
        },
        "rawLLVM": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The kernel type"
        },
        "version": {
          "type": "string",
          "description": "The LLVM version"
        },
        "xnu": {
          "type": "string",
          "description": "The xnu version"
        }
      }
    },
    "latestIpswIosBuildResponse": {
      "description": "",
      "headers": {
        "build": {
          "type": "string"
        }
      }
    },
    "latestIpswIosVersionResponse": {
      "description": "",
      "headers": {
        "version": {
          "type": "string"
        }
      }
    },
    "machoInfoResponse": {
      "description": "",
      "headers": {
        "arch": {
          "type": "string"
        },
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "mountReponse": {
      "description": "",
      "headers": {
        "already_mounted": {
          "type": "boolean"
        },
        "dmg_path": {
          "type": "string"
        },
        "mount_point": {
          "type": "string"
        }
      }
    },
    "successResponse": {
      "description": "",
      "headers": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "versionResponse": {
      "description": "",
      "headers": {
        "api_version": {
          "type": "string"
        },
        "builder_version": {
          "type": "string"
        },
        "os_type": {
          "type": "string"
        }
      }
    }
  }
}