{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This allows you to interact with \u003ccode\u003eipsw\u003c/code\u003e in a VERY powerful and flexible way via a RESTful API.\n\nThe \u003ccode\u003eipswd\u003c/code\u003e design was heavily influenced by the design of dockerd. So many of the same concepts apply.",
    "title": "ipswd API",
    "version": "v1.0"
  },
  "host": "localhost:3993",
  "basePath": "/v1",
  "paths": {
    "/_ping": {
      "get": {
        "description": "This will return \"OK\" if the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "getDaemonPing"
      },
      "head": {
        "description": "This will return if 200 the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "headDaemonPing"
      }
    },
    "/device_list": {
      "get": {
        "description": "This will return JSON of all XCode devices.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DeviceList"
        ],
        "summary": "List XCode Devices.",
        "operationId": "getDeviceList"
      }
    },
    "/download/ipsw/ios/latest/build": {
      "get": {
        "description": "Get latest iOS build.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Build",
        "operationId": "getDownloadLatestIPSWsBuild"
      }
    },
    "/download/ipsw/ios/latest/version": {
      "get": {
        "description": "Get latest iOS version.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Version",
        "operationId": "getDownloadLatestIPSWsVersion"
      }
    },
    "/dsc/imports": {
      "get": {
        "description": "Get list of dylibs that import a given dylib.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Imports",
        "operationId": "getDscImports",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscImportsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/info": {
      "get": {
        "description": "Get info about a given DSC",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Info",
        "operationId": "getDscInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/macho": {
      "get": {
        "description": "Get MachO info for a given dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "MachO",
        "operationId": "getDscMacho",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/str": {
      "get": {
        "description": "Get strings in the DSC that match a given pattern.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Strings",
        "operationId": "getDscStrings",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "regex to search for",
            "name": "pattern",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscStringsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/symaddr": {
      "get": {
        "description": "Get symbols addresses in the DSC that match a given lookup JSON payload.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Symbols",
        "operationId": "getDscSymbols",
        "parameters": [
          {
            "description": "Symbol lookups",
            "name": "lookups",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Symbol"
              }
            }
          },
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "symbol lookup response",
            "schema": {
              "$ref": "#/responses/dscSymbolsResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/responses/genericError"
            }
          },
          "500": {
            "description": "error",
            "schema": {
              "$ref": "#/responses/genericError"
            }
          }
        }
      }
    },
    "/dsc/webkit": {
      "get": {
        "description": "Get \u003ccode\u003ewebkit\u003c/code\u003e version from dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Webkit",
        "operationId": "getDscWebkit",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscWebkitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/extract/dmg": {
      "post": {
        "description": "Extract DMGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DMG",
        "operationId": "getExtractDmg",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_type": {
                  "type": "string",
                  "pattern": "^(app|sys|fs)$"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/dsc": {
      "post": {
        "description": "Extract dyld_shared_caches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DSC",
        "operationId": "getExtractDsc",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "arches": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kbag": {
      "post": {
        "description": "Extract KBAGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "KBAG",
        "operationId": "getExtractKbags",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kernel": {
      "post": {
        "description": "Extract kernelcaches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Kernel",
        "operationId": "getExtractKernel",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/pattern": {
      "post": {
        "description": "Extract files from an IPSW that match a given pattern.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Pattern",
        "operationId": "getExtractPattern",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/idev/info": {
      "get": {
        "description": "Get info about USB connected devices.",
        "tags": [
          "USB"
        ],
        "summary": "Info",
        "operationId": "getIdevInfo"
      }
    },
    "/info/ipsw": {
      "get": {
        "description": "Get IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "IPSW",
        "operationId": "getIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/info/ipsw/remote": {
      "get": {
        "description": "Get remote IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote IPSW",
        "operationId": "getRemoteIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to IPSW",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ]
      }
    },
    "/info/ota": {
      "get": {
        "description": "Get OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "OTA",
        "operationId": "getOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to OTA",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/info/ota/remote": {
      "get": {
        "description": "Get remote OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote OTA",
        "operationId": "getRemoteOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to OTA",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ]
      }
    },
    "/ipsw/fs/ents": {
      "get": {
        "description": "Get IPSW Filesystem DMG MachO entitlements.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Entitlements",
        "operationId": "getIpswFsEntitlements",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/ipsw/fs/files": {
      "get": {
        "description": "Get IPSW Filesystem DMG file listing.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Files",
        "operationId": "getIpswFsFiles",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/ipsw/fs/launchd": {
      "get": {
        "description": "Get \u003ccode\u003elaunchd\u003c/code\u003e config from IPSW Filesystem DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "launchd Config",
        "operationId": "getIpswFsLaunchd",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/kernel/kexts": {
      "get": {
        "description": "Get kernelcache KEXTs info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Kexts",
        "operationId": "getKernelKexts",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/kernel/syscall": {
      "get": {
        "description": "Get kernelcache syscalls info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Syscalls",
        "operationId": "getKernelSyscalls",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ]
      }
    },
    "/kernel/version": {
      "get": {
        "description": "Get kernelcache version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Version",
        "operationId": "getKernelVersion",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelcacheVersion"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/macho/info": {
      "get": {
        "description": "Get MachO info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MachO"
        ],
        "summary": "Info",
        "operationId": "getMachoInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to MachO",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "architecture to get info for in universal MachO",
            "name": "arch",
            "in": "query"
          }
        ]
      }
    },
    "/mount/{type}": {
      "post": {
        "description": "Mount a DMG inside a given IPSW.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Mount",
        "operationId": "postMount",
        "parameters": [
          {
            "type": "string",
            "description": "type of DMG to mount (app|sys|fs)",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/mountReponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/unmount": {
      "post": {
        "description": "Unmount a previously mounted DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Unmount",
        "operationId": "postUnmount",
        "parameters": [
          {
            "type": "string",
            "description": "mount point of DMG",
            "name": "mount_point",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to DMG",
            "name": "dmg_path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This will return the daemon version info.",
        "tags": [
          "Daemon"
        ],
        "summary": "Version",
        "operationId": "getDaemonVersion"
      }
    }
  },
  "definitions": {
    "Dylib": {
      "description": "Dylib is a struct that contains information about a dyld_shared_cache dylib",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "ImportedBy": {
      "description": "ImportedBy is a struct that contains information about which dyld_shared_cache dylibs import a given dylib",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Info": {
      "description": "Info is a struct that contains information about a dyld_shared_cache file",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "KernelVersion": {
      "title": "KernelVersion represents the kernel version.",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "LLVMVersion": {
      "title": "LLVMVersion represents the LLVM version used to compile the kernel.",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "String": {
      "description": "String is a struct that contains information about a dyld_shared_cache string",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Symbol": {
      "description": "Symbol is a struct that contains information about a dyld_shared_cache symbol",
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    }
  },
  "responses": {
    "dscImportsResponse": {
      "description": "",
      "headers": {
        "imported_by": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscInfoResponse": {
      "description": "",
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscMachoResponse": {
      "description": "",
      "headers": {
        "macho": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscStringsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "strings": {
          "type": "array",
          "items": {}
        }
      }
    },
    "dscSymbolsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "symbols": {
          "type": "array",
          "items": {}
        }
      }
    },
    "dscWebkitResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "webkit": {
          "type": "string"
        }
      }
    },
    "extractReponse": {
      "description": "The extract response message",
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "genericError": {
      "description": "",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "kernelcacheVersion": {
      "description": "Version represents the kernel version and LLVM version.",
      "headers": {
        "arch": {
          "type": "string",
          "description": "The kernel architecture"
        },
        "clang": {
          "type": "string",
          "description": "The LLVM compiler"
        },
        "cpu": {
          "type": "string",
          "description": "The kernel CPU"
        },
        "darwin": {
          "type": "string",
          "description": "The darwin version"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The build date"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The LLVM compiler flags"
        },
        "rawKernel": {
          "type": "string"
        },
        "rawLLVM": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The kernel type"
        },
        "version": {
          "type": "string",
          "description": "The LLVM version"
        },
        "xnu": {
          "type": "string",
          "description": "The xnu version"
        }
      }
    },
    "mountReponse": {
      "description": "",
      "headers": {
        "already_mounted": {
          "type": "boolean"
        },
        "dmg_path": {
          "type": "string"
        },
        "mount_point": {
          "type": "string"
        }
      }
    },
    "successResponse": {
      "description": "",
      "headers": {
        "success": {
          "type": "boolean"
        }
      }
    }
  }
}