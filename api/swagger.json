{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This allows you to interact with \u003ccode\u003eipsw\u003c/code\u003e in a VERY powerful and flexible way via a RESTful API.\n\nThe \u003ccode\u003eipswd\u003c/code\u003e design was heavily influenced by the design of dockerd. So many of the same concepts apply.",
    "title": "ipswd API",
    "version": "v1.0"
  },
  "host": "localhost:3993",
  "basePath": "/v1",
  "paths": {
    "/_ping": {
      "get": {
        "description": "This will return \"OK\" if the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "getDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "head": {
        "description": "This will return if 200 the daemon is running.",
        "tags": [
          "Daemon"
        ],
        "summary": "Ping",
        "operationId": "headDaemonPing",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/aea/fcs-keys/{key}": {
      "get": {
        "description": "Get fsc-keys PEM bytes for a given key.",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "AEA"
        ],
        "summary": "FcsKeys",
        "operationId": "getFcsKeys",
        "parameters": [
          {
            "type": "string",
            "description": "fcs-keys.json PEM lookup key",
            "name": "key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/aeaPemResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/device_list": {
      "get": {
        "description": "This will return JSON of all XCode devices.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DeviceList"
        ],
        "summary": "List XCode Devices.",
        "operationId": "getDeviceList",
        "responses": {
          "200": {
            "$ref": "#/responses/deviceListResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/blobs": {
      "post": {
        "description": "This will return the diff of two text blobs.",
        "tags": [
          "Diff"
        ],
        "summary": "Blobs",
        "operationId": "postDiffBlobs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/diff/files": {
      "post": {
        "description": "This will return the diff of two text files.",
        "tags": [
          "Diff"
        ],
        "summary": "Files",
        "operationId": "postDiffFiles",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Previous",
            "name": "prev",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Current",
            "name": "curr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/diffResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/build": {
      "get": {
        "description": "Get latest iOS build.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Build",
        "operationId": "getDownloadLatestIPSWsBuild",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosBuildResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/download/ipsw/ios/latest/version": {
      "get": {
        "description": "Get latest iOS version.",
        "tags": [
          "Download"
        ],
        "summary": "Latest iOS Version",
        "operationId": "getDownloadLatestIPSWsVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/latestIpswIosVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2o": {
      "post": {
        "description": "Convert virtual address to file offset.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2o",
        "operationId": "postDscAddrToOff",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Addr",
            "description": "address to convert",
            "name": "addr",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToOffResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/a2s": {
      "post": {
        "description": "Convert virtual address to symbol.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "a2s",
        "operationId": "postDscAddrToSym",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64"
            },
            "x-go-name": "Addrs",
            "description": "address to convert",
            "name": "addrs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscAddrToSymResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/imports": {
      "get": {
        "description": "Get list of dylibs that import a given dylib.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Imports",
        "operationId": "getDscImports",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscImportsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/info": {
      "get": {
        "description": "Get info about a given DSC",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Info",
        "operationId": "getDscInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/macho": {
      "get": {
        "description": "Get MachO info for a given dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "MachO",
        "operationId": "getDscMacho",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "dylib to search for",
            "name": "dylib",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/o2a": {
      "post": {
        "description": "Convert file offset to virtual address",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "o2a",
        "operationId": "postDscOffToAddr",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "Offset",
            "description": "offset to convert",
            "name": "off",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscOffToAddrResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/slide": {
      "post": {
        "description": "Get slide info for the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Slide Info",
        "operationId": "getDscSlideInfo",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "pattern": "=\"auth\"",
            "type": "string",
            "x-go-name": "Type",
            "description": "filter by mapping type",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSlideInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/split": {
      "post": {
        "description": "Split the DSC into its constituent dylibs using XCode's \u003ccode\u003edsc_extractor.bundle\u003c/code\u003e\n\n\u003cb\u003eNOTE:\u003c/b\u003e darwin ONLY",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Split",
        "operationId": "getDscSplit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Output",
            "description": "the folder to output the split dylibs",
            "name": "output",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "XCodePath",
            "description": "the path to the Xcode.app to use for splitting",
            "name": "xcode_path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSplitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/str": {
      "get": {
        "description": "Get strings in the DSC that match a given pattern.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Strings",
        "operationId": "getDscStrings",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "regex to search for",
            "name": "pattern",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscStringsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/symaddr": {
      "post": {
        "description": "Get symbols addresses in the DSC that match a given lookup JSON payload.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Symbols",
        "operationId": "getDscSymbols",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Symbol"
            },
            "x-go-name": "Lookups",
            "description": "symbols to lookup",
            "name": "lookups",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscSymbolsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/dsc/webkit": {
      "get": {
        "description": "Get \u003ccode\u003ewebkit\u003c/code\u003e version from dylib in the DSC.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "DSC"
        ],
        "summary": "Webkit",
        "operationId": "getDscWebkit",
        "parameters": [
          {
            "type": "string",
            "description": "path to dyld_shared_cache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dscWebkitResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/extract/dmg": {
      "post": {
        "description": "Extract DMGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DMG",
        "operationId": "getExtractDmg",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_type": {
                  "type": "string",
                  "pattern": "^(app|sys|fs)$"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/dsc": {
      "post": {
        "description": "Extract dyld_shared_caches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "DSC",
        "operationId": "getExtractDsc",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "arches": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kbag": {
      "post": {
        "description": "Extract KBAGs from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "KBAG",
        "operationId": "getExtractKbags",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/kernel": {
      "post": {
        "description": "Extract kernelcaches from an IPSW.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Kernel",
        "operationId": "getExtractKernel",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/pattern": {
      "post": {
        "description": "Extract files from an IPSW that match a given pattern.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "Pattern",
        "operationId": "getExtractPattern",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/extract/sptm": {
      "post": {
        "description": "Extract SPTM and TXM Firmwares.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Extract"
        ],
        "summary": "SPTM",
        "operationId": "getExtractSPTM",
        "parameters": [
          {
            "description": "Extraction options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmgs": {
                  "type": "boolean"
                },
                "flatten": {
                  "type": "boolean"
                },
                "insecure": {
                  "type": "boolean"
                },
                "ipsw": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "proxy": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "extraction response",
            "schema": {
              "$ref": "#/responses/extractReponse"
            }
          }
        }
      }
    },
    "/idev/info": {
      "get": {
        "description": "Get info about USB connected devices.",
        "tags": [
          "USB"
        ],
        "summary": "Info",
        "operationId": "getIdevInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/idevInfoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw": {
      "get": {
        "description": "Get IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "IPSW",
        "operationId": "getIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ipsw/remote": {
      "get": {
        "description": "Get remote IPSW info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote IPSW",
        "operationId": "getRemoteIpswInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to IPSW",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota": {
      "get": {
        "description": "Get OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "OTA",
        "operationId": "getOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to OTA",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/info/ota/remote": {
      "get": {
        "description": "Get remote OTA info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Remote OTA",
        "operationId": "getRemoteOtaInfo",
        "parameters": [
          {
            "type": "string",
            "description": "url to OTA",
            "name": "url",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "http proxy to use",
            "name": "proxy",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "ignore TLS errors",
            "name": "insecure",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/infoRemoteResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/ents": {
      "get": {
        "description": "Get IPSW Filesystem DMG MachO entitlements.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Entitlements",
        "operationId": "getIpswFsEntitlements",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to AEA pem DB JSON file",
            "name": "pem_db",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsEntitlementsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/files": {
      "get": {
        "description": "Get IPSW Filesystem DMG file listing.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "Files",
        "operationId": "getIpswFsFiles",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to AEA pem DB JSON file",
            "name": "pem_db",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsFilesResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/ipsw/fs/launchd": {
      "get": {
        "description": "Get \u003ccode\u003elaunchd\u003c/code\u003e config from IPSW Filesystem DMG.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "IPSW"
        ],
        "summary": "launchd Config",
        "operationId": "getIpswFsLaunchd",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to AEA pem DB JSON file",
            "name": "pem_db",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFsLaunchdConfigResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/kexts": {
      "get": {
        "description": "Get kernelcache KEXTs info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Kexts",
        "operationId": "getKernelKexts",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelKextsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/syscall": {
      "get": {
        "description": "Get kernelcache syscalls info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Syscalls",
        "operationId": "getKernelSyscalls",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelSyscallsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/kernel/version": {
      "get": {
        "description": "Get kernelcache version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Kernel"
        ],
        "summary": "Version",
        "operationId": "getKernelVersion",
        "parameters": [
          {
            "type": "string",
            "description": "path to kernelcache",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/kernelVersionResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/macho/info": {
      "get": {
        "description": "Get MachO info.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "MachO"
        ],
        "summary": "Info",
        "operationId": "getMachoInfo",
        "parameters": [
          {
            "type": "string",
            "description": "path to MachO",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "architecture to get info for in universal MachO",
            "name": "arch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/machoInfoResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/mount/{type}": {
      "post": {
        "description": "Mount a DMG inside a given IPSW.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Mount",
        "operationId": "postMount",
        "parameters": [
          {
            "type": "string",
            "description": "type of DMG to mount (app|sys|fs)",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to AEA pem DB JSON file",
            "name": "pem_db",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/mountReponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/dsc/{uuid}": {
      "get": {
        "description": "Get dyld_shared_cache for a given uuid.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "DSC",
        "operationId": "getDSC",
        "parameters": [
          {
            "type": "string",
            "description": "dsc UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symDscResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/dsc/{uuid}/{addr}": {
      "get": {
        "description": "Get image from a DSC for a given uuid and address.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "Dylib",
        "operationId": "getDylib",
        "parameters": [
          {
            "type": "string",
            "description": "dsc UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "pointer address",
            "name": "addr",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/ipsw": {
      "get": {
        "description": "Get IPSW for a given version OR build AND device.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "IPSW",
        "operationId": "getIPSW",
        "parameters": [
          {
            "type": "string",
            "description": "version of IPSW",
            "name": "version",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "build of IPSW",
            "name": "build",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "device of IPSW",
            "name": "device",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symIpswResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/macho/{uuid}": {
      "get": {
        "description": "Get MachO for a given uuid.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "MachO",
        "operationId": "getMachO",
        "parameters": [
          {
            "type": "string",
            "description": "machO UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symMachoResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/scan": {
      "post": {
        "description": "Scan symbols for a given IPSW.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "Scan",
        "operationId": "postScan",
        "parameters": [
          {
            "type": "string",
            "description": "path to IPSW",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "path to AEA pem DB JSON file",
            "name": "pem_db",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/successResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/{uuid}": {
      "get": {
        "description": "Get symbols for a given uuid.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "Symbols",
        "operationId": "getSymbols",
        "parameters": [
          {
            "type": "string",
            "description": "file UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symsResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/syms/{uuid}/{addr}": {
      "get": {
        "description": "Get symbol for a given uuid and address.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Syms"
        ],
        "summary": "Symbol",
        "operationId": "getSymbol",
        "parameters": [
          {
            "type": "string",
            "description": "file UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "symbol address",
            "name": "addr",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/symResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/unmount": {
      "post": {
        "description": "Unmount a previously mounted DMG.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Mount"
        ],
        "summary": "Unmount",
        "operationId": "postUnmount",
        "parameters": [
          {
            "description": "The unmount context (returned from /mount)",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dmg_path": {
                  "type": "string"
                },
                "mount_point": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "schema": {
              "$ref": "#/responses/successResponse"
            }
          },
          "500": {
            "description": "error response",
            "schema": {
              "$ref": "#/responses/genericError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This will return the daemon version info.",
        "tags": [
          "Daemon"
        ],
        "summary": "Version",
        "operationId": "getDaemonVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/versionResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Asset": {
      "description": "Asset is an OTA asset object",
      "type": "object",
      "properties": {
        "ActualMinimumSystemPartition": {
          "type": "integer",
          "format": "int64"
        },
        "ArchiveDecryptionKey": {
          "type": "string"
        },
        "ArchiveID": {
          "type": "string"
        },
        "AssetFormat": {
          "type": "string"
        },
        "AssetType": {
          "type": "string"
        },
        "AutoUpdate": {
          "type": "boolean"
        },
        "BridgeVersionInfo": {
          "$ref": "#/definitions/bridgeVersionInfo"
        },
        "Build": {
          "type": "string"
        },
        "CryptexSizeInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cryptexSize"
          }
        },
        "DataTemplateSize": {
          "type": "integer",
          "format": "int64"
        },
        "DeviceName": {
          "description": "extras",
          "type": "string"
        },
        "Devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DisablePreSoftwareUpdateAssetStaging": {
          "type": "boolean"
        },
        "EAPFSEnabled": {
          "type": "boolean"
        },
        "FirmwareBundle": {
          "type": "string"
        },
        "FirmwareVersionMajor": {
          "type": "integer",
          "format": "int64"
        },
        "FirmwareVersionMinor": {
          "type": "integer",
          "format": "int64"
        },
        "FirmwareVersionRelease": {
          "type": "integer",
          "format": "int64"
        },
        "InstallationSize": {
          "type": "string"
        },
        "InstallationSize-Snapshot": {
          "type": "string",
          "x-go-name": "InstallationSizeSnapshot"
        },
        "MinimumSystemPartition": {
          "type": "integer",
          "format": "int64"
        },
        "OSVersion": {
          "type": "string"
        },
        "PreflightBuildManifest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "PreflightGlobalSignatures": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "PrerequisiteBuild": {
          "type": "string"
        },
        "PrerequisiteOSVersion": {
          "type": "string"
        },
        "ProductVersionExtra": {
          "type": "string"
        },
        "RSEPDigest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "Ramp": {
          "type": "boolean"
        },
        "ReleaseType": {
          "type": "string"
        },
        "RescueMinimumSystemPartition": {
          "type": "integer",
          "format": "int64"
        },
        "RestoreVersion": {
          "type": "string"
        },
        "RestoreVersionInfo": {
          "$ref": "#/definitions/restoreVersionInfo"
        },
        "SEPDigest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "SUConvReqd": {
          "type": "boolean",
          "x-go-name": "ConvReqd"
        },
        "SUDocumentationID": {
          "type": "string",
          "x-go-name": "DocumentationID"
        },
        "SUInstallTonightEnabled": {
          "type": "boolean",
          "x-go-name": "InstallTonightEnabled"
        },
        "SUMultiPassEnabled": {
          "type": "boolean",
          "x-go-name": "MultiPassEnabled"
        },
        "SUProductSystemName": {
          "type": "string",
          "x-go-name": "ProductSystemName"
        },
        "SUPublisher": {
          "type": "string",
          "x-go-name": "Publisher"
        },
        "SplatOnly": {
          "type": "boolean"
        },
        "SupportedDeviceModels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SupportedDevices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SystemPartitionPadding": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "SystemVolumeSealingOverhead": {
          "type": "integer",
          "format": "int64"
        },
        "TargetUpdateBridgeVersion": {
          "type": "string"
        },
        "TrainName": {
          "type": "string"
        },
        "_AssetReceipt": {
          "$ref": "#/definitions/assetReceipt"
        },
        "_CompressionAlgorithm": {
          "type": "string",
          "x-go-name": "CompressionAlgorithm"
        },
        "_DownloadSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DownloadSize"
        },
        "_EventRecordingServiceURL": {
          "type": "string",
          "x-go-name": "EventRecordingServiceURL"
        },
        "_IsEncrypted": {
          "type": "boolean",
          "x-go-name": "IsEncrypted"
        },
        "_IsZipStreamable": {
          "type": "boolean",
          "x-go-name": "IsZipStreamable"
        },
        "_MasteredVersion": {
          "type": "string",
          "x-go-name": "MasteredVersion"
        },
        "_Measurement": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Hash"
        },
        "_MeasurementAlgorithm": {
          "type": "string",
          "x-go-name": "HashAlgorithm"
        },
        "_UnarchivedSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnarchivedSize"
        },
        "__AssetDefaultGarbageCollectionBehavior": {
          "type": "string",
          "x-go-name": "AssetDefaultGarbageCollectionBehavior"
        },
        "__BaseURL": {
          "type": "string",
          "x-go-name": "BaseURL"
        },
        "__CanUseLocalCacheServer": {
          "type": "boolean",
          "x-go-name": "CanUseLocalCacheServer"
        },
        "__HideInstallAlert": {
          "type": "boolean",
          "x-go-name": "HideInstallAlert"
        },
        "__QueuingServiceURL": {
          "type": "string",
          "x-go-name": "QueuingServiceURL"
        },
        "__RelativePath": {
          "type": "string",
          "x-go-name": "RelativePath"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/ota/types"
    },
    "ByteOrder": {
      "description": "It is implemented by [LittleEndian], [BigEndian], and [NativeEndian].",
      "type": "object",
      "title": "A ByteOrder specifies how to convert byte slices into\n16-, 32-, or 64-bit unsigned integers.",
      "properties": {
        "String": {
          "type": "string"
        }
      },
      "x-go-package": "encoding/binary"
    },
    "CDFlag": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CFBundle": {
      "type": "object",
      "properties": {
        "allow_user_load": {
          "type": "boolean",
          "x-go-name": "AllowUserLoad"
        },
        "apple_security_extension": {
          "type": "boolean",
          "x-go-name": "AppleSecurityExtension"
        },
        "build_machine_os_build": {
          "type": "string",
          "x-go-name": "BuildMachineOSBuild"
        },
        "bundle_path": {
          "type": "string",
          "x-go-name": "BundlePath"
        },
        "compatible_version": {
          "type": "string",
          "x-go-name": "CompatibleVersion"
        },
        "copyright": {
          "type": "string",
          "x-go-name": "Copyright"
        },
        "development_region": {
          "type": "string",
          "x-go-name": "DevelopmentRegion"
        },
        "executable": {
          "type": "string",
          "x-go-name": "Executable"
        },
        "executable_load_addr": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecutableLoadAddr"
        },
        "get_info_string": {
          "type": "string",
          "x-go-name": "GetInfoString"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "info_dictionary_version": {
          "type": "string",
          "x-go-name": "InfoDictionaryVersion"
        },
        "io_kit_personalities": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "IOKitPersonalities"
        },
        "minimum_os_version": {
          "type": "string",
          "x-go-name": "MinimumOSVersion"
        },
        "module_index": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ModuleIndex"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "os_bundle_libraries": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "OSBundleLibraries"
        },
        "os_bundle_required": {
          "type": "string",
          "x-go-name": "OSBundleRequired"
        },
        "os_kernel_resource": {
          "type": "boolean",
          "x-go-name": "OSKernelResource"
        },
        "package_type": {
          "type": "string",
          "x-go-name": "PackageType"
        },
        "platform_build": {
          "type": "string",
          "x-go-name": "PlatformBuild"
        },
        "platform_name": {
          "type": "string",
          "x-go-name": "PlatformName"
        },
        "platform_version": {
          "type": "string",
          "x-go-name": "PlatformVersion"
        },
        "relative_path": {
          "type": "string",
          "x-go-name": "RelativePath"
        },
        "sdk": {
          "type": "string",
          "x-go-name": "SDK"
        },
        "sdk_build": {
          "type": "string",
          "x-go-name": "SDKBuild"
        },
        "short_version_string": {
          "type": "string",
          "x-go-name": "ShortVersionString"
        },
        "signature": {
          "type": "string",
          "x-go-name": "Signature"
        },
        "supported_platforms": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedPlatforms"
        },
        "ui_device_family": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "UIDeviceFamily"
        },
        "ui_required_device_capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UIRequiredDeviceCapabilities"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "xcode": {
          "type": "string",
          "x-go-name": "Xcode"
        },
        "xcode_build": {
          "type": "string",
          "x-go-name": "XcodeBuild"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "CPU": {
      "type": "integer",
      "format": "uint32",
      "title": "A CPU is a Mach-O cpu type.",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "CPUSubtype": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "CacheMappingFlag": {
      "type": "integer",
      "format": "uint64",
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CacheMappingWithSlideInfo": {
      "type": "object",
      "properties": {
        "Pages": {
          "type": "array",
          "items": {}
        },
        "SlideInfo": {
          "$ref": "#/definitions/slideInfo"
        },
        "address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "file_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FileOffset"
        },
        "flags": {
          "$ref": "#/definitions/CacheMappingFlag"
        },
        "init_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "max_prot": {
          "$ref": "#/definitions/VmProtection"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "slide_info_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoOffset"
        },
        "slide_info_size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SlideInfoSize"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CacheSlidePointer": {
      "type": "object",
      "properties": {
        "Raw": {
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "CodeDirectory": {
      "description": "CodeDirectory object",
      "type": "object",
      "properties": {
        "cd_hash": {
          "type": "string",
          "x-go-name": "CDHash"
        },
        "code_limit": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CodeLimit"
        },
        "code_slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeSlot"
          },
          "x-go-name": "CodeSlots"
        },
        "header": {
          "$ref": "#/definitions/CodeDirectoryType"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "linkage_data": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LinkageData"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        },
        "pre_encrypt_slots": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            }
          },
          "x-go-name": "PreEncryptSlots"
        },
        "runtime_version": {
          "type": "string",
          "x-go-name": "RuntimeVersion"
        },
        "scatter": {
          "$ref": "#/definitions/Scatter"
        },
        "special_slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialSlot"
          },
          "x-go-name": "SpecialSlots"
        },
        "team_id": {
          "type": "string",
          "x-go-name": "TeamID"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CodeDirectoryType": {
      "description": "CodeDirectoryType header",
      "type": "object",
      "properties": {
        "code_limit": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "CodeLimit"
        },
        "code_limit_64": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CodeLimit64"
        },
        "exec_seg_base": {
          "description": "Version 0x20400 */",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegBase"
        },
        "exec_seg_flags": {
          "$ref": "#/definitions/execSegFlag"
        },
        "exec_seg_limit": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExecSegLimit"
        },
        "flags": {
          "$ref": "#/definitions/CDFlag"
        },
        "hash_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "HashOffset"
        },
        "hash_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "HashSize"
        },
        "hash_type": {
          "$ref": "#/definitions/hashType"
        },
        "ident_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "IdentOffset"
        },
        "linkage_application_sub_type": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "LinkageApplicationSubType"
        },
        "linkage_application_type": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageApplicationType"
        },
        "linkage_hash_type": {
          "description": "Version 0x20600 */",
          "type": "integer",
          "format": "uint8",
          "x-go-name": "LinkageHashType"
        },
        "linkage_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageOffset"
        },
        "linkage_size": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LinkageSize"
        },
        "n_code_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NCodeSlots"
        },
        "n_special_slots": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NSpecialSlots"
        },
        "page_size": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "PageSize"
        },
        "platform": {
          "$ref": "#/definitions/cdPlatform"
        },
        "pre_encrypt_offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "PreEncryptOffset"
        },
        "runtime": {
          "$ref": "#/definitions/Version"
        },
        "scatter_offset": {
          "description": "Version 0x20100 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ScatterOffset"
        },
        "team_offset": {
          "description": "Version 0x20200 */",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "TeamOffset"
        },
        "version": {
          "$ref": "#/definitions/cdVersion"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "CodeSignature": {
      "description": "CodeSignature object",
      "type": "object",
      "properties": {
        "cms_signature": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "CMSSignature"
        },
        "code_directories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeDirectory"
          },
          "x-go-name": "CodeDirectories"
        },
        "entitlements": {
          "type": "string",
          "x-go-name": "Entitlements"
        },
        "entitlements_der": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "EntitlementsDER"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "launch_constraints_parent": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LaunchConstraintsParent"
        },
        "launch_constraints_responsible": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LaunchConstraintsResponsible"
        },
        "launch_constraints_self": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LaunchConstraintsSelf"
        },
        "library_constraints": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "LibraryConstraints"
        },
        "requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Requirement"
          },
          "x-go-name": "Requirements"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign"
    },
    "CodeSlot": {
      "type": "object",
      "properties": {
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Hash"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        },
        "page": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Page"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "DeletedAt": {
      "$ref": "#/definitions/NullTime"
    },
    "Device": {
      "description": "Device object",
      "type": "object",
      "properties": {
        "compatible_device_fallback": {
          "type": "string",
          "x-go-name": "CompatibleDeviceFallback"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        },
        "product_description": {
          "type": "string",
          "x-go-name": "ProductDescription"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "target_type": {
          "type": "string",
          "x-go-name": "TargetType"
        },
        "target_variant": {
          "type": "string",
          "x-go-name": "TargetVariant"
        },
        "traits": {
          "$ref": "#/definitions/DeviceTrait"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/xcode"
    },
    "DeviceTrait": {
      "description": "DeviceTrait object",
      "type": "object",
      "properties": {
        "artwork_device_idiom": {
          "type": "string",
          "x-go-name": "ArtworkDeviceIdiom"
        },
        "artwork_device_subtype": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtworkDeviceSubtype"
        },
        "artwork_display_gamut": {
          "type": "string",
          "x-go-name": "ArtworkDisplayGamut"
        },
        "artwork_dynamic_display_mode": {
          "type": "string",
          "x-go-name": "ArtworkDynamicDisplayMode"
        },
        "artwork_hosted_idioms": {
          "type": "string",
          "x-go-name": "ArtworkHostedIdioms"
        },
        "artwork_scale_factor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ArtworkScaleFactor"
        },
        "device_performance_memory_class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DevicePerformanceMemoryClass"
        },
        "graphics_feature_set_class": {
          "type": "string",
          "x-go-name": "GraphicsFeatureSetClass"
        },
        "graphics_feature_set_fallbacks": {
          "type": "string",
          "x-go-name": "GraphicsFeatureSetFallbacks"
        },
        "preferred_architecture": {
          "type": "string",
          "x-go-name": "PreferredArchitecture"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/xcode"
    },
    "DeviceTree": {
      "description": "DeviceTree object",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Properties"
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/devicetree"
    },
    "DeviceValues": {
      "type": "object",
      "properties": {
        "activation_state": {
          "type": "string",
          "x-go-name": "ActivationState"
        },
        "activation_state_acknowledged": {
          "type": "boolean",
          "x-go-name": "ActivationStateAcknowledged"
        },
        "ap_nonce": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ApNonce"
        },
        "baseband_activation_ticket_version": {
          "type": "string",
          "x-go-name": "BasebandActivationTicketVersion"
        },
        "baseband_cert_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BasebandCertID"
        },
        "baseband_chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BasebandChipID"
        },
        "baseband_key_hash_information": {
          "type": "object",
          "properties": {
            "a_key_status": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "AKeyStatus"
            },
            "s_key_hash": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              },
              "x-go-name": "SKeyHash"
            },
            "s_key_status": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "SKeyStatus"
            }
          },
          "x-go-name": "BasebandKeyHashInformation"
        },
        "baseband_master_key_hash": {
          "type": "string",
          "x-go-name": "BasebandMasterKeyHash"
        },
        "baseband_region_sku": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BasebandRegionSKU"
        },
        "baseband_serial_number": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BasebandSerialNumber"
        },
        "baseband_status": {
          "type": "string",
          "x-go-name": "BasebandStatus"
        },
        "baseband_version": {
          "type": "string",
          "x-go-name": "BasebandVersion"
        },
        "bluetooth_address": {
          "type": "string",
          "x-go-name": "BluetoothAddress"
        },
        "board_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BoardID"
        },
        "boot_session_id": {
          "type": "string",
          "x-go-name": "BootSessionID"
        },
        "bootstrap_version": {
          "type": "string",
          "x-go-name": "BootstrapVersion"
        },
        "brick_state": {
          "type": "boolean",
          "x-go-name": "BrickState"
        },
        "build_version": {
          "type": "string",
          "x-go-name": "BuildVersion"
        },
        "carrier_bundle_info_array": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {}
          },
          "x-go-name": "CarrierBundleInfoArray"
        },
        "cert_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CertID"
        },
        "chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChipID"
        },
        "chip_serial_no": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ChipSerialNo"
        },
        "cpu_architecture": {
          "type": "string",
          "x-go-name": "CPUArchitecture"
        },
        "ct_postponement_info_pri_version": {
          "type": "string",
          "x-go-name": "CTPostponementInfoPRIVersion"
        },
        "ct_postponement_info_prl_name": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CTPostponementInfoPRLName"
        },
        "ct_postponement_info_service_provisioning_state": {
          "type": "boolean",
          "x-go-name": "CTPostponementInfoServiceProvisioningState"
        },
        "ct_postponement_status": {
          "type": "string",
          "x-go-name": "CTPostponementStatus"
        },
        "device_class": {
          "type": "string",
          "x-go-name": "DeviceClass"
        },
        "device_color": {
          "type": "string",
          "x-go-name": "DeviceColor"
        },
        "device_name": {
          "type": "string",
          "x-go-name": "DeviceName"
        },
        "die_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DieID"
        },
        "ethernet_address": {
          "type": "string",
          "x-go-name": "EthernetAddress"
        },
        "firmware_version": {
          "type": "string",
          "x-go-name": "FirmwareVersion"
        },
        "fusing_status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FusingStatus"
        },
        "gid_1": {
          "type": "string",
          "x-go-name": "GID1"
        },
        "gid_2": {
          "type": "string",
          "x-go-name": "GID2"
        },
        "hardware_model": {
          "type": "string",
          "x-go-name": "HardwareModel"
        },
        "hardware_platform": {
          "type": "string",
          "x-go-name": "HardwarePlatform"
        },
        "has_si_dp": {
          "type": "boolean",
          "x-go-name": "HasSiDP"
        },
        "host_attached": {
          "type": "boolean",
          "x-go-name": "HostAttached"
        },
        "img4_supported": {
          "type": "boolean",
          "x-go-name": "Image4Supported"
        },
        "integrated_circuit_card_identity": {
          "type": "string",
          "x-go-name": "IntegratedCircuitCardIdentity"
        },
        "international_mobile_equipment_identity": {
          "type": "string",
          "x-go-name": "InternationalMobileEquipmentIdentity"
        },
        "international_mobile_equipment_identity_2": {
          "type": "string",
          "x-go-name": "InternationalMobileEquipmentIdentity2"
        },
        "international_mobile_subscriber_identity": {
          "type": "string",
          "x-go-name": "InternationalMobileSubscriberIdentity"
        },
        "international_mobile_subscriber_identity_override": {
          "type": "boolean",
          "x-go-name": "InternationalMobileSubscriberIdentityOverride"
        },
        "mlb_serial_number": {
          "type": "string",
          "x-go-name": "MLBSerialNumber"
        },
        "mobile_equipment_identifier": {
          "type": "string",
          "x-go-name": "MobileEquipmentIdentifier"
        },
        "mobile_subscriber_country_code": {
          "type": "string",
          "x-go-name": "MobileSubscriberCountryCode"
        },
        "mobile_subscriber_network_code": {
          "type": "string",
          "x-go-name": "MobileSubscriberNetworkCode"
        },
        "model_number": {
          "type": "string",
          "x-go-name": "ModelNumber"
        },
        "non_volatile_ram": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "NonVolatileRAM"
        },
        "pair_record_protection_class": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PairRecordProtectionClass"
        },
        "partition_type": {
          "type": "string",
          "x-go-name": "PartitionType"
        },
        "password_protected": {
          "type": "boolean",
          "x-go-name": "PasswordProtected"
        },
        "phone_number": {
          "type": "string",
          "x-go-name": "PhoneNumber"
        },
        "pk_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PkHash"
        },
        "preflight_info": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "FirmwarePreflightInfo"
        },
        "pri_version___major": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_Major"
        },
        "pri_version___minor": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_Minor"
        },
        "pri_version___release_no": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PRIVersion_ReleaseNo"
        },
        "product_name": {
          "type": "string",
          "x-go-name": "ProductName"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        },
        "product_version": {
          "type": "string",
          "x-go-name": "ProductVersion"
        },
        "production_soc": {
          "type": "boolean",
          "x-go-name": "ProductionSOC"
        },
        "protocol_version": {
          "type": "string",
          "x-go-name": "ProtocolVersion"
        },
        "proximity_sensor_calibration": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "ProximitySensorCalibration"
        },
        "region_info": {
          "type": "string",
          "x-go-name": "RegionInfo"
        },
        "release_type": {
          "type": "string",
          "x-go-name": "ReleaseType"
        },
        "sep_nonce": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SEPNonce"
        },
        "serial_number": {
          "type": "string",
          "x-go-name": "SerialNumber"
        },
        "sim1_is_bootstrap": {
          "type": "boolean",
          "x-go-name": "SIM1IsBootstrap"
        },
        "sim_1_is_embedded": {
          "type": "boolean",
          "x-go-name": "SIM1IsEmbedded"
        },
        "sim_status": {
          "x-go-name": "SIMStatus"
        },
        "sim_tray_status": {
          "x-go-name": "SIMTrayStatus"
        },
        "simgid_1": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SIMGID1"
        },
        "simgid_2": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SIMGID2"
        },
        "software_behavior": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SoftwareBehavior"
        },
        "software_bundle_version": {
          "type": "string",
          "x-go-name": "SoftwareBundleVersion"
        },
        "supported_device_families": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "SupportedDeviceFamilies"
        },
        "telephony_capability": {
          "type": "boolean",
          "x-go-name": "TelephonyCapability"
        },
        "time_interval_since_1970": {
          "type": "number",
          "format": "double",
          "x-go-name": "TimeIntervalSince1970"
        },
        "time_zone": {
          "type": "string",
          "x-go-name": "TimeZone"
        },
        "time_zone_offset_from_utc": {
          "type": "number",
          "format": "double",
          "x-go-name": "TimeZoneOffsetFromUTC"
        },
        "trusted_host_attached": {
          "type": "boolean",
          "x-go-name": "TrustedHostAttached"
        },
        "unique_chip_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueChipID"
        },
        "unique_device_id": {
          "type": "string",
          "x-go-name": "UniqueDeviceID"
        },
        "untrusted_host_buid": {
          "type": "string",
          "x-go-name": "UntrustedHostBUID"
        },
        "use_raptor_certs": {
          "type": "boolean",
          "x-go-name": "UseRaptorCerts"
        },
        "uses_24_hour_clock": {
          "type": "boolean",
          "x-go-name": "Uses24HourClock"
        },
        "wi_fi_address": {
          "type": "string",
          "x-go-name": "WiFiAddress"
        },
        "wireless_board_serial_number": {
          "type": "string",
          "x-go-name": "WirelessBoardSerialNumber"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/usb/lockdownd"
    },
    "DyldSharedCache": {
      "type": "object",
      "title": "DyldSharedCache is the model for a dyld_shared_cache.",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Macho"
          },
          "x-go-name": "Images"
        },
        "shared_region_start": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "SharedRegionStart"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/model"
    },
    "Dylib": {
      "description": "Dylib is a struct that contains information about a dyld_shared_cache dylib",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "load_address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "LoadAddress"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Dysymtab": {
      "type": "object",
      "title": "A Dysymtab represents a Mach-O LC_DYSYMTAB command.",
      "properties": {
        "Extrefsymoff": {
          "description": "To support dynamic module binding the module structure for each module\nindicates the external references (defined and undefined) each module\nmakes.  For each module there is an offset and a count into the\nreference symbol table for the symbols that the module references.\nThis exists only in a dynamically linked shared library file.  For\nexecutable and object modules the defined external symbols and the\nundefined external symbols indicates the external references.",
          "type": "integer",
          "format": "uint32"
        },
        "Extreloff": {
          "description": "To support relocating an individual module in a library file quickly the\nexternal relocation entries for each module in the library need to be\naccessed efficiently.  Since the relocation entries can't be accessed\nthrough the section headers for a library file they are separated into\ngroups of local and external entries further grouped by module.  In this\ncase the presents of this load command who's extreloff, nextrel,\nlocreloff and nlocrel fields are non-zero indicates that the relocation\nentries of non-merged sections are not referenced through the section\nstructures (and the reloff and nreloc fields in the section headers are\nset to zero).\n\nSince the relocation entries are not accessed through the section headers\nthis requires the r_address field to be something other than a section\noffset to identify the item to be relocated.  In this case r_address is\nset to the offset from the vmaddr of the first LC_SEGMENT command.\nFor MH_SPLIT_SEGS images r_address is set to the the offset from the\nvmaddr of the first read-write LC_SEGMENT command.\n\nThe relocation entries are grouped by module and the module table\nentries have indexes and counts into them for the group of external\nrelocation entries for that the module.\n\nFor sections that are merged across modules there must not be any\nremaining external relocation entries for them (for merged sections\nremaining relocation entries must be local).",
          "type": "integer",
          "format": "uint32"
        },
        "Iextdefsym": {
          "type": "integer",
          "format": "uint32"
        },
        "Ilocalsym": {
          "description": "The symbols indicated by symoff and nsyms of the LC_SYMTAB load command\nare grouped into the following three groups:\nlocal symbols (further grouped by the module they are from)\ndefined external symbols (further grouped by the module they are from)\nundefined symbols\n\nThe local symbols are used only for debugging.  The dynamic binding\nprocess may have to use them to indicate to the debugger the local\nsymbols for a module that is being bound.\n\nThe last two groups are used by the dynamic binding process to do the\nbinding (indirectly through the module table and the reference symbol\ntable when this is a dynamically linked shared library file).",
          "type": "integer",
          "format": "uint32"
        },
        "IndirectSyms": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint32"
          }
        },
        "Indirectsymoff": {
          "description": "The sections that contain \"symbol pointers\" and \"routine stubs\" have\nindexes and (implied counts based on the size of the section and fixed\nsize of the entry) into the \"indirect symbol\" table for each pointer\nand stub.  For every section of these two types the index into the\nindirect symbol table is stored in the section header in the field\nreserved1.  An indirect symbol table entry is simply a 32bit index into\nthe symbol table to the symbol that the pointer or stub is referring to.\nThe indirect symbol table is ordered to match the entries in the section.",
          "type": "integer",
          "format": "uint32"
        },
        "Iundefsym": {
          "type": "integer",
          "format": "uint32"
        },
        "Len": {
          "type": "integer",
          "format": "uint32"
        },
        "Locreloff": {
          "description": "All the local relocation entries are grouped together (they are not\ngrouped by their module since they are only used if the object is moved\nfrom it staticly link edited address).",
          "type": "integer",
          "format": "uint32"
        },
        "Modtaboff": {
          "description": "To support dynamic binding of \"modules\" (whole object files) the symbol\ntable must reflect the modules that the file was created from.  This is\ndone by having a module table that has indexes and counts into the merged\ntables for each module.  The module structure that these two entries\nrefer to is described below.  This exists only in a dynamically linked\nshared library file.  For executable and object modules the file only\ncontains one module so everything in the file belongs to the module.",
          "type": "integer",
          "format": "uint32"
        },
        "Nextdefsym": {
          "type": "integer",
          "format": "uint32"
        },
        "Nextrefsyms": {
          "type": "integer",
          "format": "uint32"
        },
        "Nextrel": {
          "type": "integer",
          "format": "uint32"
        },
        "Nindirectsyms": {
          "type": "integer",
          "format": "uint32"
        },
        "Nlocalsym": {
          "type": "integer",
          "format": "uint32"
        },
        "Nlocrel": {
          "type": "integer",
          "format": "uint32"
        },
        "Nmodtab": {
          "type": "integer",
          "format": "uint32"
        },
        "Ntoc": {
          "type": "integer",
          "format": "uint32"
        },
        "Nundefsym": {
          "type": "integer",
          "format": "uint32"
        },
        "Tocoffset": {
          "description": "For the for the dynamic binding process to find which module a symbol\nis defined in the table of contents is used (analogous to the ranlib\nstructure in an archive) which maps defined external symbols to modules\nthey are defined in.  This exists only in a dynamically linked shared\nlibrary file.  For executable and object modules the defined external\nsymbols are sorted by name and is use as the table of contents.",
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho"
    },
    "File": {
      "type": "object",
      "title": "A File represents an open Mach-O file.",
      "properties": {
        "ByteOrder": {
          "$ref": "#/definitions/ByteOrder"
        },
        "CPU": {
          "$ref": "#/definitions/CPU"
        },
        "Dysymtab": {
          "$ref": "#/definitions/Dysymtab"
        },
        "Flags": {
          "$ref": "#/definitions/HeaderFlag"
        },
        "Loads": {
          "$ref": "#/definitions/loads"
        },
        "Magic": {
          "$ref": "#/definitions/Magic"
        },
        "NCommands": {
          "type": "integer",
          "format": "uint32"
        },
        "Reserved": {
          "type": "integer",
          "format": "uint32"
        },
        "Sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Section"
          }
        },
        "SizeCommands": {
          "type": "integer",
          "format": "uint32"
        },
        "SubCPU": {
          "$ref": "#/definitions/CPUSubtype"
        },
        "Symtab": {
          "$ref": "#/definitions/Symtab"
        },
        "Type": {
          "$ref": "#/definitions/HeaderFileType"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho"
    },
    "HeaderFileType": {
      "type": "integer",
      "format": "uint32",
      "title": "A HeaderFileType is the Mach-O file type, e.g. an object file, executable, or dynamic library.",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "HeaderFlag": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "IdentityInfo": {
      "type": "object",
      "properties": {
        "build_number": {
          "type": "string",
          "x-go-name": "BuildNumber"
        },
        "code_name": {
          "type": "string",
          "x-go-name": "CodeName"
        },
        "device_class": {
          "type": "string",
          "x-go-name": "DeviceClass"
        },
        "fdr_support": {
          "type": "boolean",
          "x-go-name": "FDRSupport"
        },
        "minimum_system_partition": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinimumSystemPartition"
        },
        "mobile_device_min_version": {
          "type": "string",
          "x-go-name": "MobileDeviceMinVersion"
        },
        "os_var_content_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OSVarContentSize"
        },
        "restore_behavior": {
          "type": "string",
          "x-go-name": "RestoreBehavior"
        },
        "system_partition_padding": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "SystemPartitionPadding"
        },
        "variant": {
          "type": "string",
          "x-go-name": "Variant"
        },
        "variant_contents": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "VariantContents"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/plist"
    },
    "IdentityManifest": {
      "type": "object",
      "properties": {
        "build_string": {
          "type": "string",
          "x-go-name": "BuildString"
        },
        "digest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Digest"
        },
        "epro": {
          "type": "boolean",
          "x-go-name": "EPRO"
        },
        "esec": {
          "type": "boolean",
          "x-go-name": "ESEC"
        },
        "info": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Info"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "trusted": {
          "type": "boolean",
          "x-go-name": "Trusted"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/plist"
    },
    "ImportedBy": {
      "description": "ImportedBy is a struct that contains information about which dyld_shared_cache dylibs import a given dylib",
      "type": "object",
      "properties": {
        "apps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Apps"
        },
        "dsc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DSC"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Info": {
      "description": "Info in the info object",
      "type": "object",
      "properties": {
        "DeviceTrees": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DeviceTree"
          }
        },
        "Plists": {
          "$ref": "#/definitions/Plists"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/info"
    },
    "Ipsw": {
      "type": "object",
      "title": "Ipsw is the model for an Ipsw file.",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "buildid": {
          "type": "string",
          "x-go-name": "BuildID"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          },
          "x-go-name": "Devices"
        },
        "dscs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DyldSharedCache"
          },
          "x-go-name": "DSCs"
        },
        "file_system": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Macho"
          },
          "x-go-name": "FileSystem"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "kernels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Kernelcache"
          },
          "x-go-name": "Kernels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/model"
    },
    "Kernelcache": {
      "type": "object",
      "title": "Kernelcache is the model for a kernelcache.",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "$ref": "#/definitions/DeletedAt"
        },
        "kexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Macho"
          },
          "x-go-name": "Kexts"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/model"
    },
    "LLVMVersion": {
      "type": "object",
      "title": "LLVMVersion represents the LLVM version used to compile the kernel.",
      "properties": {
        "clang": {
          "description": "The LLVM compiler",
          "type": "string",
          "x-go-name": "Clang"
        },
        "flags": {
          "description": "The LLVM compiler flags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Flags"
        },
        "version": {
          "description": "The LLVM version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "Load": {
      "type": "object",
      "title": "A Load represents any Mach-O load command.",
      "properties": {
        "Command": {
          "$ref": "#/definitions/LoadCmd"
        },
        "LoadSize": {
          "type": "integer",
          "format": "uint32"
        },
        "Raw": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "String": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho"
    },
    "LoadCmd": {
      "type": "integer",
      "format": "uint32",
      "title": "A LoadCmd is a Mach-O load command.",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "Macho": {
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "$ref": "#/definitions/DeletedAt"
        },
        "Symbols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Symbol"
          }
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "text_end": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TextEnd"
        },
        "text_start": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TextStart"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/model"
    },
    "Magic": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "NullTime": {
      "description": "NullTime implements the [Scanner] interface so\nit can be used as a scan destination, similar to [NullString].",
      "type": "object",
      "title": "NullTime represents a [time.Time] that may be null.",
      "properties": {
        "Time": {
          "type": "string",
          "format": "date-time"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "database/sql"
    },
    "Plists": {
      "description": "Plists IPSW/OTA plists object",
      "type": "object",
      "properties": {
        "DeviceMap": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/restoreDeviceMap"
          }
        },
        "ProductBuildVersion": {
          "type": "string"
        },
        "ProductVersion": {
          "type": "string"
        },
        "SupportedProductTypeIDs": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SupportedProductTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SystemRestoreImageFileSystems": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "actual_minimum_system_partition": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActualMinimumSystemPartition"
        },
        "build": {
          "type": "string",
          "x-go-name": "Build"
        },
        "build_id": {
          "type": "string",
          "x-go-name": "BuildID"
        },
        "build_identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/buildIdentity"
          },
          "x-go-name": "BuildIdentities"
        },
        "cf_bundle_identifier": {
          "type": "string",
          "x-go-name": "CFBundleIdentifier"
        },
        "cf_bundle_info_dictionary_version": {
          "type": "string",
          "x-go-name": "CFBundleInfoDictionaryVersion"
        },
        "cf_bundle_name": {
          "type": "string",
          "x-go-name": "CFBundleName"
        },
        "cf_bundle_short_version_string": {
          "type": "string",
          "x-go-name": "CFBundleShortVersionString"
        },
        "cf_bundle_version": {
          "type": "string",
          "x-go-name": "CFBundleVersion"
        },
        "device_class": {
          "type": "string",
          "x-go-name": "DeviceClass"
        },
        "hardware_model": {
          "type": "string",
          "x-go-name": "HardwareModel"
        },
        "manifest_version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ManifestVersion"
        },
        "minimum_system_partition": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinimumSystemPartition"
        },
        "mobile_asset_properties": {
          "$ref": "#/definitions/Asset"
        },
        "package_version": {
          "type": "string",
          "x-go-name": "PackageVersion"
        },
        "product_build_version": {
          "type": "string",
          "x-go-name": "ProductBuildVersion"
        },
        "product_copyright": {
          "type": "string",
          "x-go-name": "ProductCopyright"
        },
        "product_name": {
          "type": "string",
          "x-go-name": "ProductName"
        },
        "product_type": {
          "type": "string",
          "x-go-name": "ProductType"
        },
        "product_version": {
          "type": "string",
          "x-go-name": "ProductVersion"
        },
        "release_type": {
          "type": "string",
          "x-go-name": "ReleaseType"
        },
        "required_space": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RequiredSpace"
        },
        "reserve_file_aware": {
          "type": "boolean",
          "x-go-name": "ReserveFileAware"
        },
        "rsep_digest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "RSEPDigest"
        },
        "rseptbm_digests": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "RSEPTBMDigests"
        },
        "sep_digest": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SEPDigest"
        },
        "septbm_digests": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SEPTBMDigests"
        },
        "size_archive_root": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SizeArchiveRoot"
        },
        "size_patched_binaries": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SizePatchedBinaries"
        },
        "size_patched_binaries_snapshot": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SizePatchedBinariesSnapshot"
        },
        "supported_product_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SupportedProductTypes"
        },
        "system_image_id": {
          "type": "string",
          "x-go-name": "SystemImageID"
        },
        "system_partition_padding": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "SystemPartitionPadding"
        },
        "system_update_path_map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SystemUpdatePathMap"
        },
        "system_volume_sealing_overhead": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SystemVolumeSealingOverhead"
        },
        "target_update": {
          "type": "string",
          "x-go-name": "TargetUpdate"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/plist"
    },
    "Properties": {
      "description": "Properties object",
      "type": "object",
      "additionalProperties": {},
      "x-go-package": "github.com/blacktop/ipsw/pkg/devicetree"
    },
    "Rebase": {
      "type": "object",
      "properties": {
        "cache_file_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CacheFileOffset"
        },
        "cache_vm_address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CacheVMAddress"
        },
        "pointer": {
          "$ref": "#/definitions/CacheSlidePointer"
        },
        "symbol": {
          "type": "string",
          "x-go-name": "Symbol"
        },
        "target": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Target"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "Reloc": {
      "type": "object",
      "title": "A Reloc represents a Mach-O relocation.",
      "properties": {
        "Addr": {
          "type": "integer",
          "format": "uint32"
        },
        "Extern": {
          "type": "boolean"
        },
        "Len": {
          "type": "integer",
          "format": "uint8"
        },
        "Pcrel": {
          "type": "boolean"
        },
        "Scattered": {
          "type": "boolean"
        },
        "Type": {
          "description": "when Scattered == false \u0026\u0026 Extern == true, Value is the symbol number.\nwhen Scattered == false \u0026\u0026 Extern == false, Value is the section number.\nwhen Scattered == true, Value is the value that this reloc refers to.",
          "type": "integer",
          "format": "uint8"
        },
        "Value": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "Requirement": {
      "description": "Requirement object",
      "type": "object",
      "properties": {
        "data": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Data"
        },
        "detail": {
          "type": "string",
          "x-go-name": "Detail"
        },
        "length": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Length"
        },
        "magic": {
          "$ref": "#/definitions/Magic"
        },
        "offset": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Offset"
        },
        "type": {
          "$ref": "#/definitions/RequirementType"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "RequirementType": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Scatter": {
      "description": "Scatter object",
      "type": "object",
      "properties": {
        "base": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Base"
        },
        "count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Count"
        },
        "target_offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetOffset"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "Section": {
      "type": "object",
      "properties": {
        "Addr": {
          "type": "integer",
          "format": "uint64"
        },
        "Align": {
          "type": "integer",
          "format": "uint32"
        },
        "Flags": {
          "$ref": "#/definitions/SectionFlag"
        },
        "Name": {
          "type": "string"
        },
        "Nreloc": {
          "type": "integer",
          "format": "uint32"
        },
        "Offset": {
          "type": "integer",
          "format": "uint32"
        },
        "Relocs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reloc"
          }
        },
        "Reloff": {
          "type": "integer",
          "format": "uint32"
        },
        "Reserved1": {
          "type": "integer",
          "format": "uint32"
        },
        "Reserved2": {
          "type": "integer",
          "format": "uint32"
        },
        "Reserved3": {
          "type": "integer",
          "format": "uint32"
        },
        "Seg": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "uint64"
        },
        "Type": {
          "type": "integer",
          "format": "uint8"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "SectionFlag": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "SpecialSlot": {
      "type": "object",
      "properties": {
        "desc": {
          "type": "string",
          "x-go-name": "Desc"
        },
        "hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Hash"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Index"
        }
      },
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "String": {
      "description": "String is a struct that contains information about a dyld_shared_cache string",
      "type": "object",
      "properties": {
        "address": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "mapping": {
          "type": "string",
          "x-go-name": "Mapping"
        },
        "offset": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Offset"
        },
        "string": {
          "type": "string",
          "x-go-name": "String"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Symbol": {
      "type": "object",
      "required": [
        "pattern"
      ],
      "properties": {
        "end": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "End"
        },
        "start": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Start"
        },
        "symbol": {
          "type": "string",
          "x-go-name": "Symbol"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/model"
    },
    "SymbolLookup": {
      "description": "SymbolLookup is a struct that contains information about a dyld_shared_cache symbol lookup",
      "type": "object",
      "properties": {
        "address": {
          "description": "The address of the symbol",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "demanged": {
          "description": "The demangled symbol name",
          "type": "string",
          "x-go-name": "Demanged"
        },
        "ext": {
          "description": "The DSC sub-cache file extension",
          "type": "string",
          "x-go-name": "Extension"
        },
        "image": {
          "description": "The containing image name",
          "type": "string",
          "x-go-name": "Image"
        },
        "mapping": {
          "description": "The DSC mapping name",
          "type": "string",
          "x-go-name": "Mapping"
        },
        "section": {
          "description": "The containing image section",
          "type": "string",
          "x-go-name": "Section"
        },
        "segment": {
          "description": "The containing image segment",
          "type": "string",
          "x-go-name": "Segment"
        },
        "stub_island": {
          "description": "Is the symbol in a DSC stub island",
          "type": "boolean",
          "x-go-name": "StubIsland"
        },
        "symbol": {
          "description": "The symbol name",
          "type": "string",
          "x-go-name": "Symbol"
        },
        "uuid": {
          "description": "The DSC sub-cache UUID",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "Symtab": {
      "type": "object",
      "title": "A Symtab represents a Mach-O LC_SYMTAB command.",
      "properties": {
        "Len": {
          "type": "integer",
          "format": "uint32"
        },
        "Nsyms": {
          "type": "integer",
          "format": "uint32"
        },
        "Stroff": {
          "type": "integer",
          "format": "uint32"
        },
        "Strsize": {
          "type": "integer",
          "format": "uint32"
        },
        "Symoff": {
          "type": "integer",
          "format": "uint32"
        },
        "Syms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Symbol"
          }
        }
      },
      "x-go-package": "github.com/blacktop/go-macho"
    },
    "Sysent": {
      "type": "object",
      "properties": {
        "arg_bytes": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "ArgBytes"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Args"
        },
        "call": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Call"
        },
        "munge": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Munge"
        },
        "n_arg": {
          "type": "integer",
          "format": "int16",
          "x-go-name": "NArg"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "new": {
          "type": "boolean",
          "x-go-name": "New"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Number"
        },
        "old": {
          "type": "boolean",
          "x-go-name": "Old"
        },
        "old_name": {
          "type": "string",
          "x-go-name": "DBName"
        },
        "proto": {
          "type": "string",
          "x-go-name": "Proto"
        },
        "return_type": {
          "$ref": "#/definitions/returnType"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "Version": {
      "type": "object",
      "title": "Version represents the kernel version and LLVM version.",
      "allOf": [
        {
          "$ref": "#/definitions/LLVMVersion"
        },
        {
          "type": "object",
          "title": "Version represents the kernel version and LLVM version.",
          "allOf": [
            {
              "$ref": "#/definitions/LLVMVersion"
            }
          ],
          "properties": {
            "arch": {
              "description": "The kernel architecture",
              "type": "string",
              "x-go-name": "Arch"
            },
            "cpu": {
              "description": "The kernel CPU",
              "type": "string",
              "x-go-name": "CPU"
            },
            "darwin": {
              "description": "The darwin version",
              "type": "string",
              "x-go-name": "Darwin"
            },
            "date": {
              "description": "The build date",
              "type": "string",
              "format": "date-time",
              "x-go-name": "Date"
            },
            "type": {
              "description": "The kernel type",
              "type": "string",
              "x-go-name": "Type"
            },
            "xnu": {
              "description": "The xnu version",
              "type": "string",
              "x-go-name": "XNU"
            }
          }
        }
      ],
      "properties": {
        "arch": {
          "description": "The kernel architecture",
          "type": "string",
          "x-go-name": "Arch"
        },
        "cpu": {
          "description": "The kernel CPU",
          "type": "string",
          "x-go-name": "CPU"
        },
        "darwin": {
          "description": "The darwin version",
          "type": "string",
          "x-go-name": "Darwin"
        },
        "date": {
          "description": "The build date",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "type": {
          "description": "The kernel type",
          "type": "string",
          "x-go-name": "Type"
        },
        "xnu": {
          "description": "The xnu version",
          "type": "string",
          "x-go-name": "XNU"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "VmProtection": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/blacktop/go-macho/types"
    },
    "address": {
      "type": "object",
      "properties": {
        "address": {
          "description": "the offset in the DSC sub-cache",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Address"
        },
        "sub_cache": {
          "$ref": "#/definitions/subCache"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "assetReceipt": {
      "type": "object",
      "properties": {
        "AssetReceipt": {
          "type": "string"
        },
        "AssetSignature": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/ota/types"
    },
    "bridgeVersionInfo": {
      "type": "object",
      "properties": {
        "BridgeBuildGroup": {
          "type": "string"
        },
        "BridgeProductBuildVersion": {
          "type": "string"
        },
        "BridgeVersion": {
          "type": "string"
        },
        "CatalogURL": {
          "type": "string"
        },
        "IsSeed": {
          "type": "string"
        },
        "SEPEpoch": {
          "type": "object",
          "properties": {
            "Major": {
              "type": "integer",
              "format": "int64"
            },
            "Minor": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/ota/types"
    },
    "buildIdentity": {
      "type": "object",
      "properties": {
        "ap_board_id": {
          "type": "string",
          "x-go-name": "ApBoardID"
        },
        "ap_chip_id": {
          "type": "string",
          "x-go-name": "ApChipID"
        },
        "ap_os_long_version": {
          "type": "string",
          "x-go-name": "ApOSLongVersion"
        },
        "ap_security_domain": {
          "type": "string",
          "x-go-name": "ApSecurityDomain"
        },
        "bb_activation_manifest_key_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BbActivationManifestKeyHash"
        },
        "bb_chip_id": {
          "type": "string",
          "x-go-name": "BbChipID"
        },
        "bb_fdr_security_key_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BbFDRSecurityKeyHash"
        },
        "bb_provisioning_manifest_key_hash": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "BbProvisioningManifestKeyHash"
        },
        "info": {
          "$ref": "#/definitions/IdentityInfo"
        },
        "manifest": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IdentityManifest"
          },
          "x-go-name": "Manifest"
        },
        "pearl_certification_root_pub": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PearlCertificationRootPub"
        },
        "product_marketing_version": {
          "type": "string",
          "x-go-name": "ProductMarketingVersion"
        },
        "unique_build_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "UniqueBuildID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/plist"
    },
    "cdPlatform": {
      "type": "integer",
      "format": "uint8",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "cdVersion": {
      "type": "integer",
      "format": "uint32",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "cryptexSize": {
      "type": "object",
      "properties": {
        "CryptexSize": {
          "type": "integer",
          "format": "int64"
        },
        "CryptexTag": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/ota/types"
    },
    "execSegFlag": {
      "type": "integer",
      "format": "uint64",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "hashType": {
      "type": "integer",
      "format": "uint8",
      "x-go-package": "github.com/blacktop/go-macho/pkg/codesign/types"
    },
    "loads": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Load"
      },
      "x-go-package": "github.com/blacktop/go-macho"
    },
    "offset": {
      "type": "object",
      "properties": {
        "offset": {
          "description": "the file offset in the DSC sub-cache",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Offset"
        },
        "sub_cache": {
          "$ref": "#/definitions/subCache"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    },
    "restoreDeviceMap": {
      "type": "object",
      "properties": {
        "BDID": {
          "type": "integer",
          "format": "int64"
        },
        "BoardConfig": {
          "type": "string"
        },
        "CPID": {
          "type": "integer",
          "format": "int64"
        },
        "Platform": {
          "type": "string"
        },
        "SCEP": {
          "type": "integer",
          "format": "int64"
        },
        "SDOM": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/plist"
    },
    "restoreVersionInfo": {
      "type": "object",
      "properties": {
        "IsSeed": {
          "type": "boolean"
        },
        "RestoreBuildGroup": {
          "type": "string"
        },
        "RestoreLongVersion": {
          "type": "string"
        },
        "RestoreVersion": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/ota/types"
    },
    "returnType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/blacktop/ipsw/pkg/kernelcache"
    },
    "slideInfo": {
      "type": "object",
      "properties": {
        "GetPageSize": {
          "type": "integer",
          "format": "uint32"
        },
        "GetVersion": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/pkg/dyld"
    },
    "subCache": {
      "type": "object",
      "properties": {
        "ext": {
          "description": "the DSC sub-cache file extension",
          "type": "string",
          "x-go-name": "Extension"
        },
        "mapping": {
          "description": "the DSC sub-cache mapping name",
          "type": "string",
          "x-go-name": "Mapping"
        },
        "stubs": {
          "description": "is the offset in a DSC stub island",
          "type": "boolean",
          "x-go-name": "InStubs"
        },
        "uuid": {
          "description": "the DSC sub-cache UUID",
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "github.com/blacktop/ipsw/internal/commands/dsc"
    }
  },
  "responses": {
    "aeaPemResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "deviceListResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "diffResponse": {
      "description": "",
      "headers": {
        "diff": {
          "type": "string"
        }
      }
    },
    "dscAddrToOffResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/offset"
      },
      "headers": {
        "cache": {
          "description": "the vmcache offset"
        },
        "file": {
          "description": "the file offset"
        }
      }
    },
    "dscAddrToSymResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SymbolLookup"
        }
      }
    },
    "dscImportsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ImportedBy"
      },
      "headers": {
        "imported_by": {
          "description": "The list of dylibs/apps that import the specified dylib"
        },
        "path": {
          "type": "string",
          "description": "The path to the DSC file"
        }
      }
    },
    "dscInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscMachoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/File"
      },
      "headers": {
        "macho": {},
        "path": {
          "type": "string"
        }
      }
    },
    "dscOffToAddrResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/address"
      },
      "headers": {
        "cache": {
          "description": "the vmcache address"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/address"
          },
          "description": "the virtual addresses"
        }
      }
    },
    "dscSlideInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CacheMappingWithSlideInfo"
      },
      "headers": {
        "mapping": {},
        "rebases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rebase"
          }
        }
      }
    },
    "dscSplitResponse": {
      "description": "",
      "headers": {
        "dylibs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "dscStringsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "strings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/String"
          }
        }
      }
    },
    "dscSymbolsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "symbols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Symbol"
          }
        }
      }
    },
    "dscWebkitResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "webkit": {
          "type": "string"
        }
      }
    },
    "extractKernelsReponse": {
      "description": "The extract kernels response message",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "headers": {
        "artifacts": {
          "description": "The list of extracted kernels and what devices they are for"
        }
      }
    },
    "extractReponse": {
      "description": "The extract response message",
      "headers": {
        "artifacts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of extracted files"
        }
      }
    },
    "genericError": {
      "description": "",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "getFsEntitlementsResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {}
        }
      },
      "headers": {
        "entitlements": {},
        "path": {
          "type": "string"
        }
      }
    },
    "getFsFilesResponse": {
      "description": "FS files response",
      "headers": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          },
          "description": "The files in the IPSW filesystem"
        },
        "path": {
          "type": "string",
          "description": "The path to the IPSW"
        }
      }
    },
    "getFsLaunchdConfigResponse": {
      "description": "",
      "headers": {
        "launchd_config": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "idevInfoResponse": {
      "description": "",
      "headers": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceValues"
          }
        }
      }
    },
    "infoRemoteResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "infoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Info"
      },
      "headers": {
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "kernelKextsResponse": {
      "description": "",
      "headers": {
        "kexts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CFBundle"
          }
        },
        "path": {
          "type": "string"
        }
      }
    },
    "kernelSyscallsResponse": {
      "description": "",
      "headers": {
        "path": {
          "type": "string"
        },
        "syscalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sysent"
          }
        }
      }
    },
    "kernelVersionResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Version"
      },
      "headers": {
        "path": {
          "type": "string"
        },
        "version": {}
      }
    },
    "kernelcacheVersion": {
      "description": "Version represents the kernel version and LLVM version.",
      "headers": {
        "arch": {
          "type": "string",
          "description": "The kernel architecture"
        },
        "clang": {
          "type": "string",
          "description": "The LLVM compiler"
        },
        "cpu": {
          "type": "string",
          "description": "The kernel CPU"
        },
        "darwin": {
          "type": "string",
          "description": "The darwin version"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The build date"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The LLVM compiler flags"
        },
        "rawKernel": {
          "type": "string"
        },
        "rawLLVM": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The kernel type"
        },
        "version": {
          "type": "string",
          "description": "The LLVM version"
        },
        "xnu": {
          "type": "string",
          "description": "The xnu version"
        }
      }
    },
    "latestIpswIosBuildResponse": {
      "description": "",
      "headers": {
        "build": {
          "type": "string"
        }
      }
    },
    "latestIpswIosVersionResponse": {
      "description": "",
      "headers": {
        "version": {
          "type": "string"
        }
      }
    },
    "machoInfoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/File"
      },
      "headers": {
        "arch": {
          "type": "string"
        },
        "info": {},
        "path": {
          "type": "string"
        }
      }
    },
    "mountReponse": {
      "description": "",
      "headers": {
        "already_mounted": {
          "type": "boolean"
        },
        "dmg_path": {
          "type": "string"
        },
        "mount_point": {
          "type": "string"
        }
      }
    },
    "successResponse": {
      "description": "",
      "headers": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "symDscResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DyldSharedCache"
      }
    },
    "symIpswResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Ipsw"
      }
    },
    "symMachoResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Macho"
      }
    },
    "symResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Symbol"
      }
    },
    "symsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Symbol"
        }
      }
    },
    "versionResponse": {
      "description": "",
      "headers": {
        "api_version": {
          "type": "string"
        },
        "builder_version": {
          "type": "string"
        },
        "os_type": {
          "type": "string"
        }
      }
    }
  }
}